[
  {
    "objectID": "02-scraping/02-scraping.html",
    "href": "02-scraping/02-scraping.html",
    "title": "Scraping tables",
    "section": "",
    "text": "!pip install --quiet pandas beautifulsoup4 pyperclip requests\n\n\n[notice] A new release of pip is available: 23.0.1 -&gt; 24.2\n[notice] To update, run: pip install --upgrade pip"
  },
  {
    "objectID": "writing-prompt.html",
    "href": "writing-prompt.html",
    "title": "My writing prompt",
    "section": "",
    "text": "Paste the entire prompt below into ChatGPT or another chatbot, with your article at the very end.\n# Guide\n\nBelow are some of the most important AP Style rules for a data journalist to use when editing their work.\n\n- Capitalization: Only capitalize proper nouns, titles directly before a name, and the first word in a sentence.\n- Numbers: Spell out numbers one through nine; use figures for 10 and above, except in specific contexts (ages, dimensions, etc.).\n- Dates and Times: Use Arabic figures, without st, nd, rd, or th. Abbreviate months with specific dates, spell out when used alone or with a year.\n- Percentages: Use figures and spell out \"percent\" (e.g., 65 percent).\n- Titles: Capitalize formal titles when used directly before a name. Lowercase and spell out titles when not used with names.\n- Abbreviations and Acronyms: Avoid unless widely recognized. Spell out on first reference with the abbreviation in parentheses if it's used again.\n- Punctuation: Use the serial comma in a series. Place commas and periods within quotation marks.\n- Quotations: Direct quotes should be exact. Attribute clearly and punctuate correctly.\n- Attribution: Use \"said\" for attribution. Avoid adverbs and choose a neutral term.\n- Addresses: Abbreviate Ave., Blvd., and St. with numbered addresses. Spell out when no number is present.\n- States: Use AP style abbreviations when following a city, spell out when standing alone.\n- Ages: Always use figures.\n- Money: Use $ and figures. Spell out \"dollars\" for amounts without a figure.\n- Time: Use figures and a.m. or p.m., with a space in between. Noon and midnight are spelled out.\n- Datelines: Include city and state (or city and country) in all caps, followed by the story.\n- Headlines: Use sentence case. Avoid unfamiliar abbreviations.\n- Bias-Free Language: Avoid language that is sexist, racist, or otherwise biased.\n- Hyperlinks: Only include if relevant and trustworthy. Do not say \"click here.\"\n- Social Media References: Verify all information from social media sources. Use \"@\" for Twitter handles.\n- Dimensions: Use figures and spell out \"inches,\" \"feet,\" \"yards,\" etc.\n- Temperature: Use figures for all except zero. Use \"degrees\" for first reference.\n- Geographical Names: Follow AP style for U.S. and international geographical names.\n- Legislative Titles: Capitalize and abbreviate as Rep., Sen., etc., before a name. Spell out and lowercase when not directly before a name.\n- Military Titles: Capitalize and abbreviate as noted in AP style. Use figures for military units.\n- Court Cases: Use v. for versus. Italicize case names.\n- Composition Titles: Use quotation marks around book titles, songs, movies, etc.\n- Sports Terms: Familiarize with AP style for sports terminology and abbreviations.\n- Academic Degrees: Use an apostrophe in bachelor’s degree, master’s, etc. Abbreviate and capitalize when used after a name.\n- Religious Terms: Capitalize proper nouns, the Bible, and titles of religious figures.\n- Political Terms: Capitalize Democrat, Republican, etc., when referring to the party. Lowercase when used as an adjective.\n- Race and Ethnicity: Capitalize the proper names of races and ethnicities. Be sensitive and precise.\n- Disabilities: Use person-first language unless otherwise preferred. Be specific and avoid outdated terms.\n- Crime: Be specific, avoid unnecessary details, and do not imply guilt.\n- Weather Terms: Familiarize with AP style for weather-related terms.\n- War and Peace: Use specific terms for conflicts and peace agreements.\n- Business Terms: Use AP style for terms like CEO, CFO, etc. Spell out on first reference.\n- Technology Terms: Stay current with technology terminology, but explain or define unfamiliar terms.\n- Health and Science: Use AP style for health and science terms. Be clear and accurate.\n- Education: Use AP style for terms related to education systems, tests, etc.\n- Legal Terms: Use legal terminology accurately. Spell out and explain complex terms.\n- Elections: Use AP style for election-related terms. Be precise with election results and terminology.\n- Polls and Surveys: Report methodology, sample size, margin of error, and who conducted the poll.\n- Photographs: Use accurate and unbiased captions. Attribute the photographer.\n- Graphics and Charts: Ensure all data is accurate and sources are credited. Labels should be clear.\n\n# Instructions\n\nProvide suggestions for improving the text of the work below as a list of bullet points. The text is provided under the 'PAGE TO BE EDITED' heading.\n\n## Copy editing guidelines\n\n- Only address the copy of the piece.\n- Do not nest bullet points.\n- Only use the AP style guide to make suggestions.\n- Every bullet point must be something that needs to be fixed.\n- Be specific and concise.\n- Each bullet point should include a specific text change, NOT a general suggestion.\n\nNote that piece was written by an experienced reporter. Their sources, reporting, and facts are accurate. They are looking for a senior copy editor to help them improve the text of their piece.\n\n- Do not address culture, politics, or other subjective elements.\n- Do not ask for verification of facts or sources.\n- Do not address HTML, only edit the text of the piece.\n- Do not address tone, voice or formality.\n\n## PAGE TO BE EDITED"
  },
  {
    "objectID": "01-pandas/02 - Using AI about AI (incomplete).html",
    "href": "01-pandas/02 - Using AI about AI (incomplete).html",
    "title": "Now that we know a little Python: using AI as a helper",
    "section": "",
    "text": "Let’s see if we can use ChatGPT to walk us through how to do a complicated problem.\nIn April 2024, the Washington Post published Inside the secret list of websites that make AI like ChatGPT sound smart. This story analyzed the C4 dataset, a selection of data that’s part of the training process for large language models like ChatGPT.\nIt showed how much content was from Wikipedia, whether business or hobby websites were more popular, and even included a tool that allowed you to search whether your website was included in the dataset.\nLet’s see if we can do our own analysis! We’re going to use the C4M dataset, which is the multilingual version.\n\nimport pandas as pd\npd.options.display.max_colwidth = 400\n\n# We're using a CSV right from the internet, but you can visit the URL if you'd like\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/c4m-tiny-sample.csv\", nrows=3000)\ndf.head(10)"
  },
  {
    "objectID": "01-pandas/02 - Using AI about AI (incomplete).html#now-that-we-know-a-little-python-using-ai-as-a-helper",
    "href": "01-pandas/02 - Using AI about AI (incomplete).html#now-that-we-know-a-little-python-using-ai-as-a-helper",
    "title": "Now that we know a little Python: using AI as a helper",
    "section": "",
    "text": "Let’s see if we can use ChatGPT to walk us through how to do a complicated problem.\nIn April 2024, the Washington Post published Inside the secret list of websites that make AI like ChatGPT sound smart. This story analyzed the C4 dataset, a selection of data that’s part of the training process for large language models like ChatGPT.\nIt showed how much content was from Wikipedia, whether business or hobby websites were more popular, and even included a tool that allowed you to search whether your website was included in the dataset.\nLet’s see if we can do our own analysis! We’re going to use the C4M dataset, which is the multilingual version.\n\nimport pandas as pd\npd.options.display.max_colwidth = 400\n\n# We're using a CSV right from the internet, but you can visit the URL if you'd like\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/c4m-tiny-sample.csv\", nrows=3000)\ndf.head(10)"
  },
  {
    "objectID": "01-pandas/02 - Using AI about AI (incomplete).html#lets-get-crazy",
    "href": "01-pandas/02 - Using AI about AI (incomplete).html#lets-get-crazy",
    "title": "Now that we know a little Python: using AI as a helper",
    "section": "Let’s get crazy",
    "text": "Let’s get crazy\nWhat langage is each one of these in? Let’s get crazy by seeing what ChatGPT can help us do. This will be an exercise in asking specific questions, troubleshooting problems, and having a back-and-forth conversation with AI tools."
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (completed).html",
    "href": "01-pandas/01 - Data analysis with pandas (completed).html",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "Even though we have Python installed, we still need to install some extra pieces of software! Python is a whole ecosystem of content, where many of the best abilities are from packages/libraries/modules that are made by other people or companies.\n\n%pip install --quiet pandas altair lxml tqdm requests\n\n\n\n\nTo use pandas, we first need to import it. Then we can go ahead with reading in our data and analyzing it.\n\nimport pandas as pd\n\n# This creates a \"dataframe\" - the Python version of a spreadsheet\n# We're using a CSV right from the internet, but you can also use it on your own computer\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/countries.csv\")\ndf\n\n\ndf.head()\n\n\ndf.head(2)\n\n\ndf.tail()\n\n\ndf.sort_values(by='gdp')\n\n\ndf.sort_values(by='gdp', ascending=False)\n\n\ndf.sort_values('life_expectancy', ascending=False).head(10)\n\n\ndf.head(10).sort_values('life_expectancy', ascending=False)\n\n\ndf['life_expectancy']\n\n\ndf['life_expectancy'].median()\n\n\ndf['life_expectancy'] &gt; 75\n\n\ndf[df['life_expectancy'] &gt; 75]\n\n\ndf['continent'].value_counts()\n\n\ndf['continent'].unique()\n\n\ndf[df['continent'] == 'Europe']\n\n\ndf[df['continent'] == 'Europe'].sort_values(by='life_expectancy', ascending=False)\n\n\ndf[df['continent'] == 'Europe']['life_expectancy'].median()\n\n\ndf['life_expectancy'].describe()\n\n\ndf.groupby('continent')['life_expectancy'].median()\n\n\ndf.groupby('continent')['life_expectancy'].median().reset_index()\n\n\ndf.groupby('continent').agg({\n    'life_expectancy': 'median',\n    'gdp': 'max'\n})\n\n\n# Try to save this as a column??????\ndf['gdp_per_capita'] = df['gdp'] / df['population']\ndf.head(2)\n\n\n\n\nWhen you save your CSV, you always need to include index=False. If you don’t, you get extra unnamed columns that are irritating to you and your coworkers!\n\ndf.to_csv(\"output.csv\", index=False)\n\n\n\n\nThere’s a good way to graph and a bad way to graph: the default is matplotlib, which is 100% the worst. A great alternative is Altair, which is more useful and produces prettier (and interactive!) graphics.\n\ndf.plot(x='gdp_per_capita', y='life_expectancy', kind='scatter')\n\n\nimport altair as alt\n\nalt.Chart(df).mark_circle(size=50).encode(\n    x='gdp_per_capita',\n    y='life_expectancy',\n    color='continent',\n    tooltip=['country', 'continent', 'life_expectancy', 'population']\n).properties(\n    width=800,\n    height=300\n).interactive()"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (completed).html#installation",
    "href": "01-pandas/01 - Data analysis with pandas (completed).html#installation",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "Even though we have Python installed, we still need to install some extra pieces of software! Python is a whole ecosystem of content, where many of the best abilities are from packages/libraries/modules that are made by other people or companies.\n\n%pip install --quiet pandas altair lxml tqdm requests"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (completed).html#using-pandas",
    "href": "01-pandas/01 - Data analysis with pandas (completed).html#using-pandas",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "To use pandas, we first need to import it. Then we can go ahead with reading in our data and analyzing it.\n\nimport pandas as pd\n\n# This creates a \"dataframe\" - the Python version of a spreadsheet\n# We're using a CSV right from the internet, but you can also use it on your own computer\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/countries.csv\")\ndf\n\n\ndf.head()\n\n\ndf.head(2)\n\n\ndf.tail()\n\n\ndf.sort_values(by='gdp')\n\n\ndf.sort_values(by='gdp', ascending=False)\n\n\ndf.sort_values('life_expectancy', ascending=False).head(10)\n\n\ndf.head(10).sort_values('life_expectancy', ascending=False)\n\n\ndf['life_expectancy']\n\n\ndf['life_expectancy'].median()\n\n\ndf['life_expectancy'] &gt; 75\n\n\ndf[df['life_expectancy'] &gt; 75]\n\n\ndf['continent'].value_counts()\n\n\ndf['continent'].unique()\n\n\ndf[df['continent'] == 'Europe']\n\n\ndf[df['continent'] == 'Europe'].sort_values(by='life_expectancy', ascending=False)\n\n\ndf[df['continent'] == 'Europe']['life_expectancy'].median()\n\n\ndf['life_expectancy'].describe()\n\n\ndf.groupby('continent')['life_expectancy'].median()\n\n\ndf.groupby('continent')['life_expectancy'].median().reset_index()\n\n\ndf.groupby('continent').agg({\n    'life_expectancy': 'median',\n    'gdp': 'max'\n})\n\n\n# Try to save this as a column??????\ndf['gdp_per_capita'] = df['gdp'] / df['population']\ndf.head(2)"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (completed).html#saving",
    "href": "01-pandas/01 - Data analysis with pandas (completed).html#saving",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "When you save your CSV, you always need to include index=False. If you don’t, you get extra unnamed columns that are irritating to you and your coworkers!\n\ndf.to_csv(\"output.csv\", index=False)"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (completed).html#graphing",
    "href": "01-pandas/01 - Data analysis with pandas (completed).html#graphing",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "There’s a good way to graph and a bad way to graph: the default is matplotlib, which is 100% the worst. A great alternative is Altair, which is more useful and produces prettier (and interactive!) graphics.\n\ndf.plot(x='gdp_per_capita', y='life_expectancy', kind='scatter')\n\n\nimport altair as alt\n\nalt.Chart(df).mark_circle(size=50).encode(\n    x='gdp_per_capita',\n    y='life_expectancy',\n    color='continent',\n    tooltip=['country', 'continent', 'life_expectancy', 'population']\n).properties(\n    width=800,\n    height=300\n).interactive()"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (incomplete).html",
    "href": "01-pandas/01 - Data analysis with pandas (incomplete).html",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "Even though we have Python installed, we still need to install some extra pieces of software! Python is a whole ecosystem of content, where many of the best abilities are from packages/libraries/modules that are made by other people or companies.\n\n%pip install --quiet pandas altair lxml tqdm requests\n\n\n\n\nTo use pandas, we first need to import it. Then we can go ahead with reading in our data and analyzing it.\n\nimport pandas as pd\n\n# This creates a \"dataframe\" - the Python version of a spreadsheet\n# We're using a CSV right from the internet, but you can also use it on your own computer\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/countries.csv\")\ndf\n\n\n\n\nWhen you save your CSV, you always need to include index=False. If you don’t, you get extra unnamed columns that are irritating to you and your coworkers!\n\n\n\nThere’s a good way to graph and a bad way to graph: the default is matplotlib, which is 100% the worst. A great alternative is Altair, which is more useful and produces prettier (and interactive!) graphics.\n\ndf.plot(x='gdp_per_capita', y='life_expectancy', kind='scatter')\n\n\nimport altair as alt\n\nalt.Chart(df).mark_circle(size=50)"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (incomplete).html#installation",
    "href": "01-pandas/01 - Data analysis with pandas (incomplete).html#installation",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "Even though we have Python installed, we still need to install some extra pieces of software! Python is a whole ecosystem of content, where many of the best abilities are from packages/libraries/modules that are made by other people or companies.\n\n%pip install --quiet pandas altair lxml tqdm requests"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (incomplete).html#using-pandas",
    "href": "01-pandas/01 - Data analysis with pandas (incomplete).html#using-pandas",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "To use pandas, we first need to import it. Then we can go ahead with reading in our data and analyzing it.\n\nimport pandas as pd\n\n# This creates a \"dataframe\" - the Python version of a spreadsheet\n# We're using a CSV right from the internet, but you can also use it on your own computer\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/countries.csv\")\ndf"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (incomplete).html#saving",
    "href": "01-pandas/01 - Data analysis with pandas (incomplete).html#saving",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "When you save your CSV, you always need to include index=False. If you don’t, you get extra unnamed columns that are irritating to you and your coworkers!"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (incomplete).html#graphing",
    "href": "01-pandas/01 - Data analysis with pandas (incomplete).html#graphing",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "There’s a good way to graph and a bad way to graph: the default is matplotlib, which is 100% the worst. A great alternative is Altair, which is more useful and produces prettier (and interactive!) graphics.\n\ndf.plot(x='gdp_per_capita', y='life_expectancy', kind='scatter')\n\n\nimport altair as alt\n\nalt.Chart(df).mark_circle(size=50)"
  },
  {
    "objectID": "prompt.html",
    "href": "prompt.html",
    "title": "Our scraping prompt",
    "section": "",
    "text": "Find this page at bit.ly/birn-data\nTry this prompt in ChatGPT or Claude to put together a scraper!",
    "crumbs": [
      "Scraping prompt"
    ]
  },
  {
    "objectID": "prompt.html#but-first-windows-people",
    "href": "prompt.html#but-first-windows-people",
    "title": "Our scraping prompt",
    "section": "But first: WINDOWS PEOPLE",
    "text": "But first: WINDOWS PEOPLE\nWindows and Playwright don’t get along very well, so first we’ll use this code to install a very specific version of some software to make things work.\n%%python -m pip install --quiet \"ipykernel==6.28.0\"\nget_ipython().kernel.do_shutdown(restart=True)\nChatGPT doesn’t always remind you to use it, but be sure to put it in the first cell!",
    "crumbs": [
      "Scraping prompt"
    ]
  },
  {
    "objectID": "prompt.html#an-example",
    "href": "prompt.html#an-example",
    "title": "Our scraping prompt",
    "section": "An example?",
    "text": "An example?\nIf you’d like to try a sample website, search for Apraisal Companies at https://ia-plb.my.site.com/LicenseSearchPage",
    "crumbs": [
      "Scraping prompt"
    ]
  },
  {
    "objectID": "prompt.html#copy-and-paste-the-prompt-below",
    "href": "prompt.html#copy-and-paste-the-prompt-below",
    "title": "Our scraping prompt",
    "section": "Copy and paste the prompt below",
    "text": "Copy and paste the prompt below\nI have the following guide about scraping a website. Please adapt it to be for how to scrape a different website.\n\nProceed in several steps, one at a time. Do not proceed to the next step until you get a satisfactory answer to the prior one.\n\n1. Ask what the URL is\n2. Ask if there are any forms or fields to be filled out. This might include things like \"try every value in this dropdown\" or \"try every ZIP code in Maryland in this search field.\" \n3. Confirm the columns for the final dataset\n4. Confirm pagination details\n5. Write the guide\n\nIf there is a form that needs to be filled out, you may need to get the HTML for the entire form or parts of the form. If necessary a similar walkthrough as below to understand the HTML. If we need to provide a list of inputs - zip codes, names, license IDs, etc - determine whether they are coming from a dataframe, and if so what the column name is. Be sure you know how to submit the form.\n\nTo confirm columns details, walk me through how to copy the outer HTML of one \"row\" of data. I'm new to scraping and might need help. Decide on columns to be saved, then confirm them with me. If it isn't clear, explain what you need from me.\n\nHelp me determine the pagination situation. Are there multiple pages of content? Is there a 'next page' button that can be pressed again and again? Do you need to click an incrementing number of pages? Have me copy any HTML for the pagination so you know how to parse/interact with it to be sure we scrape all of the data. Ask if infinite scroll is necessary.\n\n## Important Notes: \n\n- You MUST use async playwright\n- Do NOT use asyncio and do NOT wrap everything in an async function.\n- If displaying a dataframe, do NOT use print or ace_tools, just use df.head()\n- The sample tutorial reads a table with pd.read_html. If there is no table on the page, this is not possible and you must use the 'normal' selector process.\n- To protect against missing data, create the DataFrame from a list of dictionaries, not a dictionary of lists. Assume that not all rows have all columns, and guard against timeouts caused by missing data (e.g. some elements might not have a description).\n- If it is a multi-page scraper, provide code to test whether the scraper works on one page of data before jumping into the full process. Ask whether I am satisfied with the result before proceeding.\n- Be resilient against errors when scraping, printing details on failures to help debugging\n- You do NOT need to close the browser. We can figure that out ourselves.\n- Provide complete code\n- The site might be slow or I might have bad internet, set all timeouts to be 10 seconds at a minimum\n\nGUIDE:\n\n## Installation\n\nWe need to install a few tools first! Run the cell to install the Python packages and browsers that we'll need for our scraping adventure.\n\n```\n%%python -m pip install lxml html5lib beautifulsoup4 pandas\n%%python -m pip install --quiet playwright\n!playwright install\n```\n\n## Opening up the browser and visiting our destination\n\nNote that we will NOT use asyncio or sync_playwright in the example below. We also do NOT wrap our code in a big async function.\n\n```\nfrom playwright.async_api import async_playwright\n\n# \"Hey, open up a browser\"\nplaywright = await async_playwright().start()\nbrowser = await playwright.chromium.launch(headless=False)\n\n# Create a new browser window\npage = await browser.new_page()\nawait page.goto(\"https://newjersey.mylicense.com/verification/Search.aspx\")\n```\n\n## Selecting an option from a dropdown\n\nYou always start with await page.locator(\"select\").select_option(\"whatever option you want\"). You'll probably get an error because there are multiple dropdowns on the page, but Playwright doesn't know which one you want to use! Just read the error and figure out the right one.\n\n```\n# await page.locator(\"select\").select_option(\"Acupuncture\")\nawait page.locator(\"#t_web_lookup__profession_name\").select_option(\"Perfusionist\")\n```\n\nClick the submit button.\n\n```\n# await page.get_by_text(\"Search\").click()\nawait page.get_by_role(\"button\", name=\"Search\").click()\n```\n\n## Grab the tables from the page\n\nPandas is the Python equivalent to Excel, and it's great at dealing with tabular data! Often the data on a web page that looks like a spreadsheet can be read with pd.read_html.\n\nYou use await page.content() to save the contents of the page, then feed it to read_html to find the tables. len(tables) checks the number of tables you have, then you manually poke around to see which one is the one you're interested in. tables[0] is the first one, tables[1] is the second one, and so on...\n\n```\nimport pandas as pd\nfrom io import StringIO\n\nhtml = await page.content()\ntables = pd.read_html(StringIO(html))\nlen(tables)\ntables[0]\n```\n\n## Clicking \"next page\" one\n\nJust like using a dropdown, select box or button, we'll use page.get_by_text to try to select the button.\n\nWe add timeout=10000 to wait 5 seconds before confirming it isn't there.\n\n```\n# page.get_by_text(\"Next Page\").click()\nawait page.locator(\"a:has-text('Next Page')\").click(timeout=10000)\n```\n\n## Clicking \"next page\" until it disappears\n\nEventually the \"next page\" link disappears, and Python starts screaming. We use try/except down below to say \"don't worry little baby, it's okay, we'll just finish up if the button is gone.\"\n\n```\n# all of our data will end up going here\nall_data = pd.DataFrame()\n\nwhile True:\n    await page.wait_for_selector(\"table\")\n\n    # Get all of the tables on the page\n    html = await page.content()\n    tables = pd.read_html(StringIO(html))\n\n    # Get the table (and edit if necessary)\n    df = tables[0]\n\n    # Add the tables on this page to the big list of stuff\n    all_data = pd.concat([all_data, df], ignore_index = True)\n    try:\n        await page.locator(\"a:has-text('Next Page')\").click(timeout=5000)\n    except:\n        break\nall_data\n```\n\n## Saving the results\n\nNow we'll save it to a CSV file! Easy peasy.\n\n```\nall_data.to_csv(\"output.csv\", index=False)\n```",
    "crumbs": [
      "Scraping prompt"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BIRN Summer School 2024",
    "section": "",
    "text": "Find this page at bit.ly/birn-data\n\n\n\n\nBIRN Summer School 2024\nHi, I’m Soma! This is everything I presented at the BIRN Summer School in 2024. So far you can see:\n\nData analysis with Python and pandas\nScraping with Python and Playwright\nAI for Reporting\n\nYou can find other resources of mine at:\n\njonathansoma.com\nEverything I Know\nPractical AI for Investigative Journalism\ninvestigate.ai\nYouTube",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pandas.html",
    "href": "pandas.html",
    "title": "Data analysis with Python and pandas",
    "section": "",
    "text": "Find this page at bit.ly/birn-data",
    "crumbs": [
      "Data analysis with python/pandas"
    ]
  },
  {
    "objectID": "pandas.html#getting-started",
    "href": "pandas.html#getting-started",
    "title": "Data analysis with Python and pandas",
    "section": "Getting started",
    "text": "Getting started\nLet’s get started!\nFirst we need to figure out where we are going to run our code. You have two options:\n\nOn the cloud with Google Colab\nOn our computers with Jupyterlab Desktop.\n\nUsing the cloud is nice because you don’t have to download anything or install anything and there are fewer setup issues in general. But it’s less realistic! In real life you would use your own computer. Either option is fine, and if Jupyterlab turns out to be difficult for you, you can always switch to Colab.\n\nGoogle ColabJupyterlab Desktop\n\n\nIf you want to run your code using the cloud (Google Colab), you don’t have to install anything! Just move on to the next step.\n\n\nWhile running code in the cloud is nice and easy, most people end up doing their analysis on their own computers.\nFirst, download Jupyterlab Desktop by scrolling down to the section on Installation and download the correct version.\nWindows folks, download the Windows version. If you have an older mac, you want x64 Installer (Intel chip). The Apple silicon version is for an M1, M2, or M3 mac.\nThe startup instructions are ridiculous:\n\nJupyterlab Desktop can be launched from the GUI of your operating system by clicking the application’s icon or by using jlab command from the command line. Double clicking .ipynb files is also supported and it will launch Jupyterlab Desktop and load the notebook file.\n\nWhat? Just open it like you would any other software:\n\n\n\nOpen up Jupyterlab Desktop\n\n\nOnce it’s open, move on to the next step.",
    "crumbs": [
      "Data analysis with python/pandas"
    ]
  },
  {
    "objectID": "pandas.html#getting-your-code",
    "href": "pandas.html#getting-your-code",
    "title": "Data analysis with Python and pandas",
    "section": "Getting your code",
    "text": "Getting your code\nWe run code in notebooks, which are the standard way that data scientists work on code. It allows you to go back and forth between analysis and writing notes, and your work becomes more like a “conversation.”\nThere are two options for this session’s notebooks: the completed versions and the fill-in-the-blanks versions.\nI think the fill-in-the-blanks one is more fun! You’ll type along with me, asking questions and learning as you go. The completed version doesn’t have any fun surprises, but you get to sit back and relax. You can always from the incomplete one and copy/paste from the completed version later.\n\nGoogle ColabJupyterlab Desktop\n\n\nJust click the version you’d like and it will open up automatically:\n\nThe fill-in-the-blanks version\nThe completed version\n\n\n\nDownload this file to get all of our notebooks and data files. You’ll need to extract the files from the zip by either double-clicking or right-click + Extract all.\nAfter you open Jupyterlab Desktop, use ‘open’ to find the .ipynb file you downloaded, and you’ll be ready to go!\n\n\n\nOpen up Jupyterlab Desktop\n\n\nThere are two versions of the notebooks: pick the incomplete, fill-in-the-blanks version if you’d like a little adventure or the completed version if you’d like to relax.",
    "crumbs": [
      "Data analysis with python/pandas"
    ]
  },
  {
    "objectID": "pandas.html#running-your-code",
    "href": "pandas.html#running-your-code",
    "title": "Data analysis with Python and pandas",
    "section": "Running your code",
    "text": "Running your code\nEach block of code is called a cell. You need to tell Python to “run” the cell in order to have the code do anything.\nBoth Google Colab and Jupyterlab Desktop have a little play button you use to run code.\n\nGoogle ColabJupyterlab Desktop\n\n\n\n\n\nPlay button\n\n\n\n\n\n\n\nPlay button",
    "crumbs": [
      "Data analysis with python/pandas"
    ]
  },
  {
    "objectID": "pandas.html#graphing",
    "href": "pandas.html#graphing",
    "title": "Data analysis with Python and pandas",
    "section": "Graphing",
    "text": "Graphing\nThere are two ways to make graphics:\n\nWith matplotlib, the worst thing on the planet\nWith Altair, the best thing on the planet.\n\nI recommend using Altair! You can find examples here.",
    "crumbs": [
      "Data analysis with python/pandas"
    ]
  },
  {
    "objectID": "pandas.html#tips-from-your-ai-friends",
    "href": "pandas.html#tips-from-your-ai-friends",
    "title": "Data analysis with Python and pandas",
    "section": "Tips from your AI friends",
    "text": "Tips from your AI friends\nNow that you know how to run basic Python code, your world is infinitely larger! Try asking ChatGPT or Claude about how to do something, and it can walk you through step-by-step.\nNeed more explanation on what a line of code means, or how to run it in Jupyter? You now have the vocabulary to understand, and have a coherent back-and-forth with the chatbot!\nIn the notebooks below we use AI to help perform some very very fancy analysis:\n\nThe fill-in-the-blanks version\nThe completed version\n\nIf you’d prefer to use Jupyterlab Desktop, you can use this file to download of the content for this session, including the pandas walkthrough notebooks and the AI ones, too.",
    "crumbs": [
      "Data analysis with python/pandas"
    ]
  },
  {
    "objectID": "pandas.html#other-resources",
    "href": "pandas.html#other-resources",
    "title": "Data analysis with Python and pandas",
    "section": "Other resources",
    "text": "Other resources\nA great resource is Ben Welsh’s First Python Notebook. It’s like a longer version of what we did today!",
    "crumbs": [
      "Data analysis with python/pandas"
    ]
  },
  {
    "objectID": "scraping.html",
    "href": "scraping.html",
    "title": "Scraping with Python and Playwright",
    "section": "",
    "text": "Find this page at bit.ly/birn-data",
    "crumbs": [
      "Scraping with Python"
    ]
  },
  {
    "objectID": "scraping.html#getting-started",
    "href": "scraping.html#getting-started",
    "title": "Scraping with Python and Playwright",
    "section": "Getting started",
    "text": "Getting started\nLet’s get started!\nWhen we learned to do data analysis in Python, it was possible to skip setup and run all of our code in the cloud. But not this time! You’ll need to install Jupyterlab Desktop on your computer.\nFirst, download Jupyterlab Desktop by scrolling down to the section on Installation and download the correct version.\nWindows folks, download the Windows version. If you have an older mac, you want x64 Installer (Intel chip). The Apple silicon version is for an M1, M2, or M3 mac.\nThe startup instructions are ridiculous:\n\nJupyterlab Desktop can be launched from the GUI of your operating system by clicking the application’s icon or by using jlab command from the command line. Double clicking .ipynb files is also supported and it will launch Jupyterlab Desktop and load the notebook file.\n\nWhat? Just open it like you would any other software:\n\n\n\nOpen up Jupyterlab Desktop\n\n\nOnce it’s open, move on to the next step.\n\nCreating a new notebook\nWhen data scientists program in Python, they use notebooks. To create a new notebook, click the New Session link in Jupyterlab, then Python 3 under Notebook.\n\nYour Jupyterlab Desktop might take some time to finish installing! It needs to download Python and set some things up. Give it some time to complete the process after you open it.\n\n\n\n\nNew session\n\n\n\n\n\nNew notebook\n\n\n\n\nRunning code\nTo give your code a try, type the following Python code and press the play ▶️ button.\nprint(\"Hello\")",
    "crumbs": [
      "Scraping with Python"
    ]
  },
  {
    "objectID": "scraping.html#inspecting-our-pages",
    "href": "scraping.html#inspecting-our-pages",
    "title": "Scraping with Python and Playwright",
    "section": "Inspecting our pages",
    "text": "Inspecting our pages\n\nOpening the web inspector\nRight-click (or command-click) to bring up the menu, then select Inspect. It might be slightly different if you aren’t using Chrome!\n\n\n\nUsing the web inspector\nMove your mouse around on the code on the right.\n\n\nYour browser does not support the video tag. \nOr click the ‘select’ button and click what you are interested in\n\n\nYour browser does not support the video tag. \n\n\nGetting the code\nTo get the HTML code for part of the page, first find it using the Web Inspector. Then right click, Copy, Copy outerHTML. You can paste this into ChatGPT to help write your scraper.",
    "crumbs": [
      "Scraping with Python"
    ]
  },
  {
    "objectID": "scraping.html#writing-your-scraper",
    "href": "scraping.html#writing-your-scraper",
    "title": "Scraping with Python and Playwright",
    "section": "Writing your scraper",
    "text": "Writing your scraper\nUse this custom prompt to see if you can put together a scraper! We’ll walk through it several times in class.\nOur example we’ll use is Apraisal Companies from https://ia-plb.my.site.com/LicenseSearchPage",
    "crumbs": [
      "Scraping with Python"
    ]
  },
  {
    "objectID": "ai-reporting.html",
    "href": "ai-reporting.html",
    "title": "AI for Reporting",
    "section": "",
    "text": "Find this page at bit.ly/birn-data\nLinks for you!\nPractical AI for Investigative Journalism, my YouTube series",
    "crumbs": [
      "AI for Reporting"
    ]
  },
  {
    "objectID": "ai-reporting.html#chatbots",
    "href": "ai-reporting.html#chatbots",
    "title": "AI for Reporting",
    "section": "Chatbots",
    "text": "Chatbots\n\nChatGPT\nClaude\nPerplexity, an AI search engine",
    "crumbs": [
      "AI for Reporting"
    ]
  },
  {
    "objectID": "ai-reporting.html#writing-suggestions",
    "href": "ai-reporting.html#writing-suggestions",
    "title": "AI for Reporting",
    "section": "Writing suggestions",
    "text": "Writing suggestions\n\nGrammarly\nMy simple editing prompt",
    "crumbs": [
      "AI for Reporting"
    ]
  },
  {
    "objectID": "ai-reporting.html#ai-stories",
    "href": "ai-reporting.html#ai-stories",
    "title": "AI for Reporting",
    "section": "AI stories",
    "text": "AI stories\n\nApple says its App Store is ‘a safe and trusted place.’ We found 1,500 reports of unwanted sexual behavior on six apps, some targeting minors., from the Washington Post\nWe Asked an AI to Map Our Stories Across NYC, from THE CITY",
    "crumbs": [
      "AI for Reporting"
    ]
  },
  {
    "objectID": "ai-reporting.html#ai-in-google-sheets",
    "href": "ai-reporting.html#ai-in-google-sheets",
    "title": "AI for Reporting",
    "section": "AI in Google Sheets",
    "text": "AI in Google Sheets\n\nClaude for Sheets\nExample spreadsheet",
    "crumbs": [
      "AI for Reporting"
    ]
  },
  {
    "objectID": "ai-reporting.html#transcription",
    "href": "ai-reporting.html#transcription",
    "title": "AI for Reporting",
    "section": "Transcription",
    "text": "Transcription\n\nMacWhisper for macOS\nEasyWhisper, for Windows + macOS\nWhisper JAX, an online sample",
    "crumbs": [
      "AI for Reporting"
    ]
  },
  {
    "objectID": "ai-reporting.html#software",
    "href": "ai-reporting.html#software",
    "title": "AI for Reporting",
    "section": "Software",
    "text": "Software\n\nAnythingLLM, a chatbot where you can upload your documents\nLMStudio, if you want to run models on your own machine",
    "crumbs": [
      "AI for Reporting"
    ]
  },
  {
    "objectID": "01-pandas/02 - Using AI about AI (inclass).html",
    "href": "01-pandas/02 - Using AI about AI (inclass).html",
    "title": "Now that we know a little Python: using AI as a helper",
    "section": "",
    "text": "Let’s see if we can use ChatGPT to walk us through how to do a complicated problem.\nIn April 2024, the Washington Post published Inside the secret list of websites that make AI like ChatGPT sound smart. This story analyzed the C4 dataset, a selection of data that’s part of the training process for large language models like ChatGPT.\nIt showed how much content was from Wikipedia, whether business or hobby websites were more popular, and even included a tool that allowed you to search whether your website was included in the dataset.\nLet’s see if we can do our own analysis! We’re going to use the C4M dataset, which is the multilingual version.\n\nimport pandas as pd\npd.options.display.max_colwidth = 400\n\n# We're using a CSV right from the internet, but you can visit the URL if you'd like\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/c4m-tiny-sample.csv\", nrows=3000)\ndf.head(10)"
  },
  {
    "objectID": "01-pandas/02 - Using AI about AI (inclass).html#now-that-we-know-a-little-python-using-ai-as-a-helper",
    "href": "01-pandas/02 - Using AI about AI (inclass).html#now-that-we-know-a-little-python-using-ai-as-a-helper",
    "title": "Now that we know a little Python: using AI as a helper",
    "section": "",
    "text": "Let’s see if we can use ChatGPT to walk us through how to do a complicated problem.\nIn April 2024, the Washington Post published Inside the secret list of websites that make AI like ChatGPT sound smart. This story analyzed the C4 dataset, a selection of data that’s part of the training process for large language models like ChatGPT.\nIt showed how much content was from Wikipedia, whether business or hobby websites were more popular, and even included a tool that allowed you to search whether your website was included in the dataset.\nLet’s see if we can do our own analysis! We’re going to use the C4M dataset, which is the multilingual version.\n\nimport pandas as pd\npd.options.display.max_colwidth = 400\n\n# We're using a CSV right from the internet, but you can visit the URL if you'd like\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/c4m-tiny-sample.csv\", nrows=3000)\ndf.head(10)"
  },
  {
    "objectID": "01-pandas/02 - Using AI about AI (inclass).html#lets-get-crazy",
    "href": "01-pandas/02 - Using AI about AI (inclass).html#lets-get-crazy",
    "title": "Now that we know a little Python: using AI as a helper",
    "section": "Let’s get crazy",
    "text": "Let’s get crazy\nWhat langage is each one of these in? Let’s get crazy by seeing what ChatGPT can help us do. This will be an exercise in asking specific questions, troubleshooting problems, and having a back-and-forth conversation with AI tools.\n\nimport pandas as pd\n\ndf = pd.read_csv(\"c"
  },
  {
    "objectID": "01-pandas/02 - Using AI about AI (completed).html",
    "href": "01-pandas/02 - Using AI about AI (completed).html",
    "title": "Now that we know a little Python: using AI as a helper",
    "section": "",
    "text": "Let’s see if we can use ChatGPT to walk us through how to do a complicated problem.\nIn April 2024, the Washington Post published Inside the secret list of websites that make AI like ChatGPT sound smart. This story analyzed the C4 dataset, a selection of data that’s part of the training process for large language models like ChatGPT.\nIt showed how much content was from Wikipedia, whether business or hobby websites were more popular, and even included a tool that allowed you to search whether your website was included in the dataset.\nLet’s see if we can do our own analysis! We’re going to use the C4M dataset, which is the multilingual version.\n\nimport pandas as pd\npd.options.display.max_colwidth = 400\n\n# We're using a CSV right from the internet, but you can visit the URL if you'd like\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/c4m-tiny-sample.csv\", nrows=3000)\ndf.head(10)"
  },
  {
    "objectID": "01-pandas/02 - Using AI about AI (completed).html#now-that-we-know-a-little-python-using-ai-as-a-helper",
    "href": "01-pandas/02 - Using AI about AI (completed).html#now-that-we-know-a-little-python-using-ai-as-a-helper",
    "title": "Now that we know a little Python: using AI as a helper",
    "section": "",
    "text": "Let’s see if we can use ChatGPT to walk us through how to do a complicated problem.\nIn April 2024, the Washington Post published Inside the secret list of websites that make AI like ChatGPT sound smart. This story analyzed the C4 dataset, a selection of data that’s part of the training process for large language models like ChatGPT.\nIt showed how much content was from Wikipedia, whether business or hobby websites were more popular, and even included a tool that allowed you to search whether your website was included in the dataset.\nLet’s see if we can do our own analysis! We’re going to use the C4M dataset, which is the multilingual version.\n\nimport pandas as pd\npd.options.display.max_colwidth = 400\n\n# We're using a CSV right from the internet, but you can visit the URL if you'd like\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/c4m-tiny-sample.csv\", nrows=3000)\ndf.head(10)"
  },
  {
    "objectID": "01-pandas/02 - Using AI about AI (completed).html#lets-get-crazy",
    "href": "01-pandas/02 - Using AI about AI (completed).html#lets-get-crazy",
    "title": "Now that we know a little Python: using AI as a helper",
    "section": "Let’s get crazy",
    "text": "Let’s get crazy\nWhat langage is each one of these in? Let’s get crazy by seeing what ChatGPT can help us do. This will be an exercise in asking specific questions, troubleshooting problems, and having a back-and-forth conversation with AI tools.\n\npip install langdetect\n\n\nimport pandas as pd\nfrom tqdm import tqdm\nfrom langdetect import detect\nfrom langdetect.lang_detect_exception import LangDetectException\n\ntqdm.pandas()\n\n# Assuming df is your DataFrame and 'text' is the column containing the text data\ndef detect_language(text):\n    try:\n        return detect(text)\n    except LangDetectException:\n        return 'unknown'  # In case language detection fails\n\n# Add the 'lang' column to the DataFrame\ndf['lang'] = df['text'].progress_apply(detect_language)\n\n\ndf\n\n\nfrom langdetect import detect_langs\nfrom langdetect.lang_detect_exception import LangDetectException\n\ndef detect_language_with_confidence(text):\n    try:\n        detections = detect_langs(text)\n        if detections:\n            top_detection = detections[0]\n            return top_detection.lang, top_detection.prob\n        else:\n            return 'unknown', 0.0\n    except LangDetectException:\n        return 'unknown', 0.0  # In case language detection fails\n\n# Apply the function to get both language and confidence score\ndf[['lang', 'confidence']] = df['text'].progress_apply(lambda x: pd.Series(detect_language_with_confidence(x)))\n\n\ndf\n\n\ndf['lang'].value_counts(normalize=True)\n\n\npip install fasttext\n\n\nimport urllib.request\n\n# URL for the lid.176.bin model\nurl = \"https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.bin\"\noutput_path = \"lid.176.bin\"\n\n# Download the file\nprint(\"Downloading lid.176.bin...\")\nurllib.request.urlretrieve(url, output_path)\nprint(\"Download complete!\")\n\n\nimport fasttext\n\n# Load the pre-trained language identification model\nmodel = fasttext.load_model('lid.176.bin')\n\ndef detect_language_fasttext(text):\n    # Clean the text by removing newlines\n    cleaned_text = text.replace('\\n', ' ').strip()\n    predictions = model.predict(cleaned_text)\n    lang = predictions[0][0].replace('__label__', '')\n    confidence = predictions[1][0]\n    return lang, confidence\n\ndf[['lang', 'confidence']] = df['text'].progress_apply(lambda x: pd.Series(detect_language_fasttext(x)))\n\n\ndf['lang'].value_counts(normalize=True)\n\n\ndf[df['lang'].isin(['hr', 'sr'])]\n\n\npd.options.display.max_colwidth = 500\n\n\ndf[df['lang'].isin(['hr', 'sr'])]"
  },
  {
    "objectID": "01-pandas/02 - Using AI about AI (completed).html#saving-the-results",
    "href": "01-pandas/02 - Using AI about AI (completed).html#saving-the-results",
    "title": "Now that we know a little Python: using AI as a helper",
    "section": "Saving the results",
    "text": "Saving the results\n\ndf.to_csv(\"edited.csv\", index=False)"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (inclass).html",
    "href": "01-pandas/01 - Data analysis with pandas (inclass).html",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "Even though we have Python installed, we still need to install some extra pieces of software! Python is a whole ecosystem of content, where many of the best abilities are from packages/libraries/modules that are made by other people or companies.\n\n%pip install --quiet pandas altair lxml tqdm requests\n\n\n[notice] A new release of pip is available: 23.0.1 -&gt; 24.2\n[notice] To update, run: pip install --upgrade pip\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n\n\nTo use pandas, we first need to import it. Then we can go ahead with reading in our data and analyzing it.\n\nimport pandas as pd\n\n# This creates a \"dataframe\" - the Python version of a spreadsheet\n# We're using a CSV right from the internet, but you can also use it on your own computer\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/countries.csv\")\ndf\n\n\n\n\nWhen you save your CSV, you always need to include index=False. If you don’t, you get extra unnamed columns that are irritating to you and your coworkers!\n\n\n\nThere’s a good way to graph and a bad way to graph: the default is matplotlib, which is 100% the worst. A great alternative is Altair, which is more useful and produces prettier (and interactive!) graphics.\n\ndf.plot(x='gdp_per_capita', y='life_expectancy', kind='scatter')\n\n\nimport altair as alt\n\nalt.Chart(df).mark_circle(size=50)"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (inclass).html#installation",
    "href": "01-pandas/01 - Data analysis with pandas (inclass).html#installation",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "Even though we have Python installed, we still need to install some extra pieces of software! Python is a whole ecosystem of content, where many of the best abilities are from packages/libraries/modules that are made by other people or companies.\n\n%pip install --quiet pandas altair lxml tqdm requests\n\n\n[notice] A new release of pip is available: 23.0.1 -&gt; 24.2\n[notice] To update, run: pip install --upgrade pip\nNote: you may need to restart the kernel to use updated packages."
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (inclass).html#using-pandas",
    "href": "01-pandas/01 - Data analysis with pandas (inclass).html#using-pandas",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "To use pandas, we first need to import it. Then we can go ahead with reading in our data and analyzing it.\n\nimport pandas as pd\n\n# This creates a \"dataframe\" - the Python version of a spreadsheet\n# We're using a CSV right from the internet, but you can also use it on your own computer\ndf = pd.read_csv(\"https://raw.githubusercontent.com/jsoma/2024-birn/main/01-pandas/countries.csv\")\ndf"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (inclass).html#saving",
    "href": "01-pandas/01 - Data analysis with pandas (inclass).html#saving",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "When you save your CSV, you always need to include index=False. If you don’t, you get extra unnamed columns that are irritating to you and your coworkers!"
  },
  {
    "objectID": "01-pandas/01 - Data analysis with pandas (inclass).html#graphing",
    "href": "01-pandas/01 - Data analysis with pandas (inclass).html#graphing",
    "title": "Data analysis basics with pandas",
    "section": "",
    "text": "There’s a good way to graph and a bad way to graph: the default is matplotlib, which is 100% the worst. A great alternative is Altair, which is more useful and produces prettier (and interactive!) graphics.\n\ndf.plot(x='gdp_per_capita', y='life_expectancy', kind='scatter')\n\n\nimport altair as alt\n\nalt.Chart(df).mark_circle(size=50)"
  },
  {
    "objectID": "02-scraping/Untitled.html",
    "href": "02-scraping/Untitled.html",
    "title": "BIRN Summer School 2024",
    "section": "",
    "text": "from playwright.async_api import async_playwright\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# Start the Playwright engine\nplaywright = await async_playwright().start()\nbrowser = await playwright.chromium.launch(headless=False)\n\n# Open a new page and navigate to the target website\npage = await browser.new_page()\nawait page.goto(\"https://data.gov.hr/ckan/dataset\")\n\n&lt;Response url='https://data.gov.hr/ckan/dataset' request=&lt;Request url='https://data.gov.hr/ckan/dataset' method='GET'&gt;&gt;\n\n\n\nawait page.wait_for_selector(\".dataset-item\")\n\n&lt;JSHandle preview=JSHandle@node&gt;\n\n\n\n# Wait for the dataset elements to be loaded\nawait page.wait_for_selector(\".dataset-item\")\n\n# Get the page content\nhtml = await page.content()\n\n# Parse the HTML content with BeautifulSoup\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extracting data\ndatasets = []\n\nfor dataset in soup.select('.dataset-item'):\n    try:\n        # Extract dataset name\n        name_element = dataset.select_one('.dataset-heading a')\n        dataset_name = name_element.text.strip() if name_element else \"No Name\"\n        \n        # Extract URL\n        dataset_url = \"https://data.gov.hr\" + name_element['href'] if name_element else \"No URL\"\n        \n        # Extract description\n        description_element = dataset.select_one('.notes')\n        dataset_description = description_element.text.strip() if description_element else \"No Description\"\n        \n        # Extract tags\n        tags_elements = dataset.select('.tag-list a')\n        dataset_tags = [tag.text.strip() for tag in tags_elements] if tags_elements else [\"No Tags\"]\n        \n        # Append the data to the list\n        datasets.append({\n            'Dataset Name': dataset_name,\n            'URL': dataset_url,\n            'Description': dataset_description,\n            'Tags': ', '.join(dataset_tags)\n        })\n    except Exception as e:\n        print(f\"Failed to scrape dataset: {e}\")\n\n# Create DataFrame\ndf = pd.DataFrame(datasets)\ndf.head()\n\n\n\n\n\n\n\n\n\nDataset Name\nURL\nDescription\nTags\n\n\n\n\n0\nGospodarska podjela šuma šumoposjednika\nhttps://data.gov.hr/ckan/dataset/gospodarska-p...\nNo Description\nNo Tags\n\n\n1\nPlan proračuna i realizacija za 2024.\nhttps://data.gov.hr/ckan/dataset/plan-proracun...\nNo Description\nNo Tags\n\n\n2\nUpisnik registriranih objekata za uzgoj i valj...\nhttps://data.gov.hr/ckan/dataset/upisnik-regis...\nNo Description\nNo Tags\n\n\n3\nPopis delegiranih tijela za potvrđivanje sukla...\nhttps://data.gov.hr/ckan/dataset/popis-delegir...\nNo Description\nNo Tags\n\n\n4\nPopis delegiranih tijela za potvrđivanje sukla...\nhttps://data.gov.hr/ckan/dataset/popis-delegir...\nNo Description\nNo Tags\n\n\n\n\n\n\n\n\n\nfrom playwright.async_api import async_playwright\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# Initialize Playwright and navigate to the page\nplaywright = await async_playwright().start()\nbrowser = await playwright.chromium.launch(headless=False)\npage = await browser.new_page()\nawait page.goto(\"https://data.gov.rs/sr/datasets/\")\n\n# Ensure the data is loaded\nawait page.wait_for_selector(\"li[data-v-2e2e7c]\")\n\n# Extract page content and parse it with BeautifulSoup\nhtml = await page.content()\nsoup = BeautifulSoup(html, \"html.parser\")\n\n# Find all dataset entries\ndatasets = soup.select(\"li[data-v-2e2e7c]\")\n\n# Prepare a list to store the data\ndata = []\n\nfor dataset in datasets:\n    try:\n        # Extract data using the selectors\n        title = dataset.select_one(\"h4.card-title\").get_text(strip=True)\n        description = dataset.select_one(\"div.card-description\").get_text(strip=True)\n        url = dataset.select_one(\"a.unstyled\")['href']\n        num_resources = dataset.select_one(\"ul.card-hover-data li:nth-child(1) span\").get_text(strip=True)\n        use_count = dataset.select_one(\"ul.card-hover-data li:nth-child(2) span\").get_text(strip=True)\n        supporting_count = dataset.select_one(\"ul.card-hover-data li:nth-child(3) span\").get_text(strip=True)\n\n        # Append to the list as a dictionary\n        data.append({\n            \"Title\": title,\n            \"Description\": description,\n            \"Dataset URL\": url,\n            \"Number of Resources\": num_resources,\n            \"Use Count\": use_count,\n            \"Supporting Count\": supporting_count,\n        })\n    except Exception as e:\n        print(f\"Failed to scrape a dataset entry: {e}\")\n\n# Convert the list to a DataFrame\ndf = pd.DataFrame(data)\n\n# Display the first few rows to confirm the data\ndf.head()\n\n\n\n\n\n\n\n\n\nTitle\nDescription\nDataset URL\nNumber of Resources\nUse Count\nSupporting Count\n\n\n\n\n0\nКАТАСТАР КОНТАМИНИРАНИХ ЛОКАЦИЈА\nКатастар контаминираних локација представља ск...\nhttps://data.gov.rs/sr/datasets/katastar-konta...\n1\n0\n0\n\n\n1\nСтање земљишта у урбаним срединама\nПодаци показују степен угрожености земљишта од...\nhttps://data.gov.rs/sr/datasets/stanje-zemljis...\n22\n0\n0\n\n\n2\nРедовни програм Реализација\nСкуп података о извршеним услугама Програма де...\nhttps://data.gov.rs/sr/datasets/redovni-progra...\n6\n0\n0\n\n\n3\nЕвиденција акредитованих спроводилаца обука НАЈУ\nЕвиденција акредитованих спроводилаца обука НА...\nhttps://data.gov.rs/sr/datasets/evidentsija-ak...\n1\n0\n0\n\n\n4\nМОЈА СРЕДЊА ШКОЛА\nовде унесите опис слике\\n\\nПортал Моја средња ...\nhttps://data.gov.rs/sr/datasets/moja-srednja-s...\n1\n0\n0\n\n\n\n\n\n\n\n\n\nfrom playwright.async_api import async_playwright\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# Start Playwright and launch the browser\nplaywright = await async_playwright().start()\nbrowser = await playwright.chromium.launch(headless=False)\n\n# Create a new browser window\npage = await browser.new_page()\nawait page.goto(\"https://data.gov.rs/sr/datasets/\")\n\n&lt;Response url='https://data.gov.rs/sr/datasets/' request=&lt;Request url='https://data.gov.rs/sr/datasets/' method='GET'&gt;&gt;\n\n\n\nasync def extract_data_from_page(page):\n    # Wait for the page content to load\n    await page.wait_for_selector(\"li[data-v-2e2e7c]\")\n\n    # Get the page content and parse it with BeautifulSoup\n    html = await page.content()\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Find all dataset entries on the page\n    rows = soup.select('li[data-v-2e2e7c]')\n\n    # List to hold all extracted data\n    data = []\n\n    # Loop through each row and extract information\n    for row in rows:\n        try:\n            # Extract the data\n            title = row.select_one('h4.card-title').text.strip()\n            description = row.select_one('div.card-description').text.strip()\n            url = row.select_one('a')['href']\n            created_at = row.select_one('article')['created_at']\n            last_modified = row.select_one('article')['last_modified']\n            last_update = row.select_one('article')['last_update']\n            license = row.select_one('article')['license']\n            tags = row.select_one('article')['tags']\n            resources = row.select('li')[0].select_one('span').text.strip()\n            uses = row.select('li')[1].select_one('span').text.strip()\n            supporting = row.select('li')[2].select_one('span').text.strip()\n\n            # Append data as a dictionary\n            data.append({\n                \"Title\": title,\n                \"Description\": description,\n                \"URL\": url,\n                \"Created At\": created_at,\n                \"Last Modified\": last_modified,\n                \"Last Update\": last_update,\n                \"License\": license,\n                \"Tags\": tags,\n                \"Resources\": resources,\n                \"Uses\": uses,\n                \"Supporting\": supporting\n            })\n\n        except Exception as e:\n            print(f\"Failed to extract data for a row: {e}\")\n\n    return data\n\n# Extract data from the first page\ndata = await extract_data_from_page(page)\n\n\nall_data = []\n\n# Continue clicking the \"Next page\" button until it disappears\nwhile True:\n    # Extract data from the current page\n    page_data = await extract_data_from_page(page)\n    all_data.extend(page_data)\n    \n    try:\n        # Try to click the \"Next page\" button\n        await page.locator(\"a.fr-pagination__link--next\").click(timeout=5000)\n    except:\n        # If the button is not found, break the loop (end of pagination)\n        break\n\n# Convert the data into a DataFrame\ndf = pd.DataFrame(all_data)\ndf.head()\n\n\n\n\n\n\n\n\n\nTitle\nDescription\nURL\nCreated At\nLast Modified\nLast Update\nLicense\nTags\nResources\nUses\nSupporting\n\n\n\n\n0\nКАТАСТАР КОНТАМИНИРАНИХ ЛОКАЦИЈА\nКатастар контаминираних локација представља ск...\nhttps://data.gov.rs/sr/datasets/katastar-konta...\n2024-05-29T13:28:17.964000\n2024-06-06T08:22:33.848000\n2024-05-29T00:00:00\npublic_domain\n\n1\n0\n0\n\n\n1\nСтање земљишта у урбаним срединама\nПодаци показују степен угрожености земљишта од...\nhttps://data.gov.rs/sr/datasets/stanje-zemljis...\n2024-04-10T12:53:35.338000\n2024-06-06T09:03:03.834000\n2024-06-06T09:02:49\npublic_domain\n\n22\n0\n0\n\n\n2\nРедовни програм Реализација\nСкуп података о извршеним услугама Програма де...\nhttps://data.gov.rs/sr/datasets/redovni-progra...\n2024-03-15T14:38:24.169000\n2024-03-20T17:38:23.525000\n2024-03-15T15:02:27\npublic_domain\n\n6\n0\n0\n\n\n3\nЕвиденција акредитованих спроводилаца обука НАЈУ\nЕвиденција акредитованих спроводилаца обука НА...\nhttps://data.gov.rs/sr/datasets/evidentsija-ak...\n2023-05-31T13:08:57.716000\n2024-01-15T09:21:40.015000\n2023-05-31T13:09:11\npublic_domain\nakreditacija,akreditovani-sprovodioci,sprovodi...\n1\n0\n0\n\n\n4\nМОЈА СРЕДЊА ШКОЛА\nовде унесите опис слике\\n\\nПортал Моја средња ...\nhttps://data.gov.rs/sr/datasets/moja-srednja-s...\n2024-05-22T16:36:16.085000\n2024-05-23T16:29:20.670000\n2024-05-22T16:36:45\npublic_domain\nbroj-ucenika,matematika,maternjijezik,obrazova...\n1\n0\n0\n\n\n\n\n\n\n\n\n\ndf.to_csv(\"datasets_output.csv\", index=False)\n\n\n## Installation\n\n# Install the necessary packages\n%pip install lxml html5lib beautifulsoup4 pandas\n%pip install --quiet playwright\n!playwright install\n\n## Opening up the browser and visiting our destination\n\nfrom playwright.async_api import async_playwright\n\n# Start Playwright and open the browser\nplaywright = await async_playwright().start()\nbrowser = await playwright.chromium.launch(headless=False)\npage = await browser.new_page()\nawait page.goto(\"https://data.gov.rs/sr/datasets/\")\n\n## Scraping the data\n\nimport pandas as pd\nfrom io import StringIO\n\n# Function to extract data from a single page\nasync def extract_data(page):\n    all_data = []\n    \n    # Extract HTML content\n    html = await page.content()\n\n    # Use BeautifulSoup to parse the HTML\n    from bs4 import BeautifulSoup\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Find all dataset entries\n    entries = soup.find_all('li', {'data-v-2e2e7c': True})\n    \n    for entry in entries:\n        title_tag = entry.find('h4', {'class': 'card-title'})\n        description_tag = entry.find('div', {'class': 'card-description mt-xs'})\n        resources_tag = entry.find('li', text='ресурса')\n        uses_tag = entry.find('li', text='употреба')\n        supports_tag = entry.find('li', text='подржавања')\n        url_tag = entry.find('a', {'class': 'unstyled w-10 block'})\n        \n        title = title_tag.text.strip() if title_tag else 'N/A'\n        description = description_tag.text.strip() if description_tag else 'N/A'\n        resources = resources_tag.text.strip().split()[-1] if resources_tag else '0'\n        uses = uses_tag.text.strip().split()[-1] if uses_tag else '0'\n        supports = supports_tag.text.strip().split()[-1] if supports_tag else '0'\n        url = url_tag['href'] if url_tag else 'N/A'\n        \n        all_data.append({\n            'Title': title,\n            'Description': description,\n            'Number of Resources': resources,\n            'Number of Uses': uses,\n            'Number of Supports': supports,\n            'URL': url\n        })\n\n    return all_data\n\n# Initialize the data container\nfull_data = []\n\nwhile True:\n    # Extract data from the current page\n    page_data = await extract_data(page)\n    full_data.extend(page_data)\n\n    # Try to click the \"Next Page\" button\n    try:\n        next_button = page.locator(\"a:has-text('Следећа страница')\")\n        if await next_button.is_visible():\n            await next_button.click(timeout=5000)\n            await page.wait_for_timeout(2000)  # Wait for the page to load\n        else:\n            break\n    except Exception as e:\n        print(f\"Error navigating to the next page: {e}\")\n        break\n\n# Convert the collected data into a DataFrame\ndf = pd.DataFrame(full_data)\n\n# Show the first few rows of the DataFrame\ndf.head()\n\n## Saving the results\n\n# Save the DataFrame to a CSV file\ndf.to_csv(\"output.csv\", index=False)\n\nRequirement already satisfied: lxml in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (4.9.4)\nRequirement already satisfied: html5lib in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (1.1)\nRequirement already satisfied: beautifulsoup4 in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (4.12.3)\nRequirement already satisfied: pandas in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (2.2.2)\nRequirement already satisfied: six&gt;=1.9 in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (from html5lib) (1.16.0)\nRequirement already satisfied: webencodings in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (from html5lib) (0.5.1)\nRequirement already satisfied: soupsieve&gt;1.2 in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (from beautifulsoup4) (2.5)\nRequirement already satisfied: pytz&gt;=2020.1 in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (from pandas) (2022.7.1)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: numpy&gt;=1.22.4 in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (from pandas) (1.26.4)\nRequirement already satisfied: tzdata&gt;=2022.7 in /Users/soma/.pyenv/versions/3.10.13/lib/python3.10/site-packages (from pandas) (2024.1)\n\n[notice] A new release of pip is available: 23.0.1 -&gt; 24.2\n[notice] To update, run: pip install --upgrade pip\nNote: you may need to restart the kernel to use updated packages.\n\n[notice] A new release of pip is available: 23.0.1 -&gt; 24.2\n[notice] To update, run: pip install --upgrade pip\nNote: you may need to restart the kernel to use updated packages.\n\n\n/var/folders/25/h3prywj14qb0mlkl2s8bxq5m0000gn/T/ipykernel_16723/3968558994.py:40: DeprecationWarning: The 'text' argument to find()-type methods is deprecated. Use 'string' instead.\n  resources_tag = entry.find('li', text='ресурса')\n/var/folders/25/h3prywj14qb0mlkl2s8bxq5m0000gn/T/ipykernel_16723/3968558994.py:41: DeprecationWarning: The 'text' argument to find()-type methods is deprecated. Use 'string' instead.\n  uses_tag = entry.find('li', text='употреба')\n/var/folders/25/h3prywj14qb0mlkl2s8bxq5m0000gn/T/ipykernel_16723/3968558994.py:42: DeprecationWarning: The 'text' argument to find()-type methods is deprecated. Use 'string' instead.\n  supports_tag = entry.find('li', text='подржавања')\n\n\n\ndf\n\n\n\n\n\n\n\n\n\nTitle\nDescription\nNumber of Resources\nNumber of Uses\nNumber of Supports\nURL\n\n\n\n\n0\nЗапослени према занимању, полу и региону.Анкет...\nЗапослени према занимању, полу и региону.Анкет...\n0\n0\n0\nhttps://data.gov.rs/sr/datasets/zaposleni-prem...\n\n\n1\nСтопа неформалне запослености.Анкета о радној ...\nСтопа неформалне запослености.Анкета о радној ...\n0\n0\n0\nhttps://data.gov.rs/sr/datasets/stopa-neformal...\n\n\n2\nСтановништво према националној припадности и полу\nСтановништво према националној припадности и п...\n0\n0\n0\nhttps://data.gov.rs/sr/datasets/stanovnishtvo-...\n\n\n3\nПросечна старост становништва према полу\nПросечна старост становништва према полу http...\n0\n0\n0\nhttps://data.gov.rs/sr/datasets/prosechna-star...\n\n\n4\nСтановништво старо 15 и више година које живи ...\nСтановништво старо 15 и више година које живи ...\n0\n0\n0\nhttps://data.gov.rs/sr/datasets/stanovnishtvo-...\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n575\nCOVID-19 – Заражени у периоду 6.03. – 14.04.20...\nСкуп података садржи ресурсе о:\\nполу заражени...\n0\n0\n0\nhttps://data.gov.rs/sr/datasets/covid-19-zaraz...\n\n\n576\nГТФС\nПодаци о јавног саобраћа Града Београда у ГТФС...\n0\n0\n0\nhttps://data.gov.rs/sr/datasets/gtfs/\n\n\n577\nРегистар стамбених заједница\nРегистар стамбених заједница је електронска ба...\n0\n0\n0\nhttps://data.gov.rs/sr/datasets/registar-stamb...\n\n\n578\nЗадржани простор минералних сировина, подземни...\nСкуп података обухвата податке о задржаном про...\n0\n0\n0\nhttps://data.gov.rs/sr/datasets/zadrzhani-pros...\n\n\n579\nНаучноистраживачки простор Републике Србије\nПодаци о научноистраживачкој делатности које ј...\n0\n0\n0\nhttps://data.gov.rs/sr/datasets/nauchnoistrazh...\n\n\n\n\n580 rows × 6 columns\n\n\n\n\n\nfrom playwright.async_api import async_playwright\nimport pandas as pd\nfrom io import StringIO\n\n# Function to scrape data from the site\nasync def scrape_data():\n    # Start Playwright and open the browser\n    playwright = await async_playwright().start()\n    browser = await playwright.chromium.launch(headless=False)\n    page = await browser.new_page()\n    await page.goto(\"https://www.tdlr.texas.gov/LicenseSearch/\")\n\n    # Select 'ABBOT' from the city dropdown and submit the search\n    await page.locator(\"select[name='phy_city']\").select_option(\"ABBOTT\")\n    await page.locator(\"input[type='submit']\").click()\n\n    # Initialize an empty DataFrame to collect data\n    all_data = pd.DataFrame()\n    \n    while True:\n        # Wait for the results table to load\n        await page.wait_for_selector(\"table\")\n        \n        # Extract the content of the page\n        html = await page.content()\n        tables = pd.read_html(StringIO(html))\n        \n        # Extract data from the first table\n        if tables:\n            df = tables[0]\n            # Add the data from this page to the all_data DataFrame\n            all_data = pd.concat([all_data, df], ignore_index=True)\n        \n        # Check for the 'Next' button and click it if available\n        try:\n            next_button = await page.locator(\"a:has-text('Next')\").get_attribute('href')\n            if next_button:\n                await page.goto(next_button, timeout=10000)\n            else:\n                break\n        except Exception as e:\n            print(f\"Error: {e}\")\n            break\n    \n    # Save the data to a CSV file\n    all_data.to_csv(\"output.csv\", index=False)\n\n    # Close the browser\n    await browser.close()\n\n# Run the scraping function\nawait scrape_data()\n\nTimeoutError: Page.wait_for_selector: Timeout 30000ms exceeded.\nCall log:\nwaiting for locator(\"table\") to be visible\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n  -   locator resolved to 3 elements. Proceeding with the first one: &lt;table border=\"2\" id=\"Table1\" cellpadding=\"6\" bgcolor=\"…&gt;…&lt;/table&gt;\n\n\n\nfrom playwright.async_api import async_playwright\nimport time\n\nasync def run():\n    # Start Playwright and open a browser\n    playwright = await async_playwright().start()\n    browser = await playwright.chromium.launch(headless=False)\n    page = await browser.new_page()\n\n    # Go to the target URL\n    await page.goto(\"https://www.tdlr.texas.gov/LicenseSearch\")\n\n    # Wait for the dropdown to be visible\n    await page.wait_for_selector('select[name=\"phy_city\"]')\n\n    # Extract all options from the dropdown\n    dropdown = await page.query_selector('select[name=\"phy_city\"]')\n    options = await dropdown.query_selector_all('option')\n\n    # Loop through each option and select it\n    for option in options:\n        value = await option.get_attribute('value')\n        if value == \"-1\":  # Skip the default option\n            continue\n        await dropdown.select_option(value=value.strip())\n        print(f\"Selected: {value.strip()}\")\n\n        # Perform the action after selecting the city (e.g., submit the form, wait for results)\n        # Add your action code here\n\n        # Optionally, wait a few seconds for the results to load\n        await page.wait_for_timeout(2000)  # Adjust the timeout as needed\n\n    # Close the browser\n    await browser.close()\n\n# Run the function\nawait run()\n\nFuture exception was never retrieved\nfuture: &lt;Future finished exception=Exception('Connection closed while reading from the driver')&gt;\nException: Connection closed while reading from the driver\n\n\nSelected: ABBOTT\nSelected: ABERNATHY\nSelected: ABILENE\nSelected: ACE\nSelected: ACKERLY\nSelected: ACTON\nSelected: ADAMSVILLE\nSelected: ADDISON\n\n\nCancelledError: \n\n\n\nfrom playwright.async_api import async_playwright\nimport pandas as pd\n\nasync def run():\n    # Start Playwright and open a browser\n    playwright = await async_playwright().start()\n    browser = await playwright.chromium.launch(headless=False)\n    page = await browser.new_page()\n\n    # Go to the target URL\n    await page.goto(\"https://www.tdlr.texas.gov/LicenseSearch\")\n\n    # Wait for the dropdown to be visible\n    await page.wait_for_selector('select[name=\"phy_city\"]')\n\n    # Extract all options from the dropdown\n    dropdown = await page.query_selector('select[name=\"phy_city\"]')\n    options = await dropdown.query_selector_all('option')\n\n    # Prepare a list to collect data\n    all_data = []\n\n    for option in options[2:]:\n        value = await option.get_attribute('value')\n        if value == \"-1\":  # Skip the default option\n            continue\n        await dropdown.select_option(value=value.strip())\n        print(f\"Selected: {value.strip()}\")\n\n        # Wait for results to load\n        await page.wait_for_timeout(2000)\n\n        while True:\n            # Get the HTML content of the page\n            html = await page.content()\n\n            # Parse HTML tables with pd.read_html\n            dfs = pd.read_html(html)\n            for df in dfs:\n                if df.empty:\n                    continue\n                # Assuming the table of interest is the first one\n                all_data.append(df)\n\n            # Check for and click the \"Next\" button\n            next_button = await page.query_selector('a:has-text(\"Next\")')\n            if next_button:\n                await next_button.click()\n                await page.wait_for_timeout(2000)  # Wait for the next page to load\n            else:\n                break\n\n    # Concatenate all DataFrames into one\n    final_df = pd.concat(all_data, ignore_index=True)\n    print(final_df.head())  # Display the first few rows\n\n    # Close the browser\n    await browser.close()\n\n# Run the function\nawait run()\n\nSelected: ABERNATHY\nSelected: ABILENE\nSelected: ACE\nSelected: ACKERLY\nSelected: ACTON\n\n\n/var/folders/25/h3prywj14qb0mlkl2s8bxq5m0000gn/T/ipykernel_16723/460225862.py:38: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n  dfs = pd.read_html(html)\n/var/folders/25/h3prywj14qb0mlkl2s8bxq5m0000gn/T/ipykernel_16723/460225862.py:38: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n  dfs = pd.read_html(html)\n/var/folders/25/h3prywj14qb0mlkl2s8bxq5m0000gn/T/ipykernel_16723/460225862.py:38: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n  dfs = pd.read_html(html)\n/var/folders/25/h3prywj14qb0mlkl2s8bxq5m0000gn/T/ipykernel_16723/460225862.py:38: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n  dfs = pd.read_html(html)\n\n\nCancelledError: \n\n\n\nfrom playwright.async_api import async_playwright\n\nasync def run():\n    playwright = await async_playwright().start()\n    browser = await playwright.chromium.launch(headless=False)\n    page = await browser.new_page()\n    await page.goto(\"https://www.tdlr.texas.gov/LicenseSearch/\")\n\n    # Wait for the dropdown to be available\n    await page.wait_for_selector('#content &gt; form &gt; table &gt; tbody &gt; tr &gt; td &gt; table &gt; tbody &gt; tr:nth-child(8) &gt; td &gt; select')\n\n    # Get all options from the dropdown\n    dropdown = await page.query_selector('#content &gt; form &gt; table &gt; tbody &gt; tr &gt; td &gt; table &gt; tbody &gt; tr:nth-child(8) &gt; td &gt; select')\n    options = await dropdown.query_selector_all('option')\n    \n    for option in options:\n        value = await option.get_attribute('value')\n        text = await option.inner_text()\n        print(f\"Selecting option: {text} (value: {value})\")\n\n        # Select the option\n        await dropdown.select_option(value)\n        \n        # Submit the form if necessary\n        # await page.click('selector_for_submit_button') # Replace with actual submit button selector if needed\n\n        # Wait for the page to update with new results, adjust timeout as needed\n        await page.wait_for_timeout(5000)\n\n    await browser.close()\n\nawait run()\n\nSelecting option: Choose One (Optional)\n                                                 (value: -1)\nSelecting option: ABBOTT               (value: ABBOTT              )\nSelecting option: ABERNATHY            (value: ABERNATHY           )\nSelecting option: ABILENE              (value: ABILENE             )\nSelecting option: ACE                  (value: ACE                 )\nSelecting option: ACKERLY              (value: ACKERLY             )\nSelecting option: ACTON                (value: ACTON               )\nSelecting option: ADAMSVILLE           (value: ADAMSVILLE          )\nSelecting option: ADDISON              (value: ADDISON             )\nSelecting option: ADELL                (value: ADELL               )\nSelecting option: ADKINS               (value: ADKINS              )\nSelecting option: ADRIAN               (value: ADRIAN              )\nSelecting option: AFTON                (value: AFTON               )\nSelecting option: AGNUS                (value: AGNUS               )\nSelecting option: AGUA DULCE           (value: AGUA DULCE          )\nSelecting option: AGUILARES            (value: AGUILARES           )\nSelecting option: AIKEN                (value: AIKEN               )\nSelecting option: ALAMO                (value: ALAMO               )\nSelecting option: ALAMO HEIGHTS        (value: ALAMO HEIGHTS       )\nSelecting option: ALANREED             (value: ALANREED            )\nSelecting option: ALBA                 (value: ALBA                )\nSelecting option: ALBANY               (value: ALBANY              )\nSelecting option: ALDINE               (value: ALDINE              )\nSelecting option: ALEDO                (value: ALEDO               )\nSelecting option: ALGOA                (value: ALGOA               )\nSelecting option: ALICE                (value: ALICE               )\nSelecting option: ALIEF                (value: ALIEF               )\nSelecting option: ALLEN                (value: ALLEN               )\nSelecting option: ALLEYTON             (value: ALLEYTON            )\nSelecting option: ALLISON              (value: ALLISON             )\nSelecting option: ALMA                 (value: ALMA                )\nSelecting option: ALPINE               (value: ALPINE              )\nSelecting option: ALTA LOMA            (value: ALTA LOMA           )\nSelecting option: ALTAIR               (value: ALTAIR              )\nSelecting option: ALTO                 (value: ALTO                )\nSelecting option: ALTOGA               (value: ALTOGA              )\nSelecting option: ALTON                (value: ALTON               )\nSelecting option: ALVARADO             (value: ALVARADO            )\nSelecting option: ALVAREDO             (value: ALVAREDO            )\nSelecting option: ALVIN                (value: ALVIN               )\nSelecting option: ALVORD               (value: ALVORD              )\nSelecting option: AMARILLO             (value: AMARILLO            )\nSelecting option: AMES                 (value: AMES                )\nSelecting option: AMHERST              (value: AMHERST             )\nSelecting option: ANAHUAC              (value: ANAHUAC             )\nSelecting option: ANDERSON             (value: ANDERSON            )\nSelecting option: ANDICE               (value: ANDICE              )\nSelecting option: ANDREWS              (value: ANDREWS             )\nSelecting option: ANGLETON             (value: ANGLETON            )\nSelecting option: ANNA                 (value: ANNA                )\nSelecting option: ANNETTA              (value: ANNETTA             )\nSelecting option: ANNONA               (value: ANNONA              )\nSelecting option: ANSON                (value: ANSON               )\nSelecting option: ANTHONY              (value: ANTHONY             )\nSelecting option: ANTON                (value: ANTON               )\nSelecting option: APPLE SPRINGS        (value: APPLE SPRINGS       )\nSelecting option: AQUILLA              (value: AQUILLA             )\nSelecting option: ARANSAS PASS         (value: ARANSAS PASS        )\nSelecting option: ARCADIA              (value: ARCADIA             )\nSelecting option: ARCHER CITY          (value: ARCHER CITY         )\nSelecting option: ARCOLA               (value: ARCOLA              )\nSelecting option: ARGYLE               (value: ARGYLE              )\nSelecting option: ARLINGTON            (value: ARLINGTON           )\nSelecting option: ARMSTRONG            (value: ARMSTRONG           )\nSelecting option: ARP                  (value: ARP                 )\nSelecting option: ARROYO               (value: ARROYO              )\nSelecting option: ART                  (value: ART                 )\nSelecting option: ARTESIA WELLS        (value: ARTESIA WELLS       )\nSelecting option: ARTHUR CITY          (value: ARTHUR CITY         )\nSelecting option: ASHERTON             (value: ASHERTON            )\nSelecting option: ASPERMONT            (value: ASPERMONT           )\nSelecting option: ATASCOCITA           (value: ATASCOCITA          )\nSelecting option: ATASCOSA             (value: ATASCOSA            )\nSelecting option: ATHENS               (value: ATHENS              )\nSelecting option: ATLANTA              (value: ATLANTA             )\nSelecting option: AUBREY               (value: AUBREY              )\nSelecting option: AURORA               (value: AURORA              )\nSelecting option: AUSTIN               (value: AUSTIN              )\nSelecting option: AUSTWELL             (value: AUSTWELL            )\nSelecting option: AVALON               (value: AVALON              )\nSelecting option: AVERY                (value: AVERY               )\nSelecting option: AVINGER              (value: AVINGER             )\nSelecting option: AVOCA                (value: AVOCA               )\nSelecting option: AXTELL               (value: AXTELL              )\nSelecting option: AZLE                 (value: AZLE                )\nSelecting option: BACLIFF              (value: BACLIFF             )\nSelecting option: BAGWELL              (value: BAGWELL             )\nSelecting option: BAILEY               (value: BAILEY              )\nSelecting option: BAILEYS PRAIRIE      (value: BAILEYS PRAIRIE     )\nSelecting option: BAIRD                (value: BAIRD               )\nSelecting option: BALCH SPRINGS        (value: BALCH SPRINGS       )\nSelecting option: BALCONES HEIGHTS     (value: BALCONES HEIGHTS    )\nSelecting option: BALLINGER            (value: BALLINGER           )\nSelecting option: BALMORHEA            (value: BALMORHEA           )\nSelecting option: BANDERA              (value: BANDERA             )\nSelecting option: BANGS                (value: BANGS               )\nSelecting option: BANQUETE             (value: BANQUETE            )\nSelecting option: BARDWELL             (value: BARDWELL            )\nSelecting option: BARKER               (value: BARKER              )\nSelecting option: BARKSDALE            (value: BARKSDALE           )\nSelecting option: BARNHART             (value: BARNHART            )\nSelecting option: BARRY                (value: BARRY               )\nSelecting option: BARSTOW              (value: BARSTOW             )\nSelecting option: BARTLETT             (value: BARTLETT            )\nSelecting option: BARTONVILLE          (value: BARTONVILLE         )\nSelecting option: BASTROP              (value: BASTROP             )\nSelecting option: BATESVILLE           (value: BATESVILLE          )\nSelecting option: BATSON               (value: BATSON              )\nSelecting option: BAY CITY             (value: BAY CITY            )\nSelecting option: BAYOU VISTA          (value: BAYOU VISTA         )\nSelecting option: BAYSIDE              (value: BAYSIDE             )\nSelecting option: BAYTOWN              (value: BAYTOWN             )\nSelecting option: BAYVIEW              (value: BAYVIEW             )\nSelecting option: BEACH CITY           (value: BEACH CITY          )\nSelecting option: BEASLEY              (value: BEASLEY             )\nSelecting option: BEAUMONT             (value: BEAUMONT            )\nSelecting option: BEBE                 (value: BEBE                )\nSelecting option: BECKVILLE            (value: BECKVILLE           )\nSelecting option: BEDFORD              (value: BEDFORD             )\nSelecting option: BEDIAS               (value: BEDIAS              )\nSelecting option: BEE CAVE             (value: BEE CAVE            )\nSelecting option: BEEVILLE             (value: BEEVILLE            )\nSelecting option: BELDING              (value: BELDING             )\nSelecting option: BELLAIRE             (value: BELLAIRE            )\nSelecting option: BELLEVUE             (value: BELLEVUE            )\nSelecting option: BELLMEAD             (value: BELLMEAD            )\nSelecting option: BELLS                (value: BELLS               )\nSelecting option: BELLVILLE            (value: BELLVILLE           )\nSelecting option: BELMONT              (value: BELMONT             )\nSelecting option: BELTON               (value: BELTON              )\nSelecting option: BEN BOLT             (value: BEN BOLT            )\nSelecting option: BEN FRANKLIN         (value: BEN FRANKLIN        )\nSelecting option: BEN WHEELER          (value: BEN WHEELER         )\nSelecting option: BENAVIDES            (value: BENAVIDES           )\nSelecting option: BENBROOK             (value: BENBROOK            )\nSelecting option: BEND                 (value: BEND                )\nSelecting option: BENJAMIN             (value: BENJAMIN            )\nSelecting option: BERCLAIR             (value: BERCLAIR            )\nSelecting option: BERGHEIM             (value: BERGHEIM            )\nSelecting option: BERNARDSVILLE        (value: BERNARDSVILLE       )\nSelecting option: BERRYVILLE           (value: BERRYVILLE          )\nSelecting option: BERTRAM              (value: BERTRAM             )\nSelecting option: BETHEL               (value: BETHEL              )\nSelecting option: BEVERLY HILLS        (value: BEVERLY HILLS       )\nSelecting option: BEVIL OAKS           (value: BEVIL OAKS          )\nSelecting option: BIG BEND NATIONAL PA (value: BIG BEND NATIONAL PA)\nSelecting option: BIG BEND NATL PARK   (value: BIG BEND NATL PARK  )\nSelecting option: BIG LAKE             (value: BIG LAKE            )\nSelecting option: BIG SANDY            (value: BIG SANDY           )\nSelecting option: BIG SPRING           (value: BIG SPRING          )\nSelecting option: BIG WELLS            (value: BIG WELLS           )\nSelecting option: BIGFOOT              (value: BIGFOOT             )\nSelecting option: BISHOP               (value: BISHOP              )\nSelecting option: BIVINS               (value: BIVINS              )\nSelecting option: BLACK                (value: BLACK               )\nSelecting option: BLACKWELL            (value: BLACKWELL           )\nSelecting option: BLANCO               (value: BLANCO              )\nSelecting option: BLANKET              (value: BLANKET             )\nSelecting option: BLEDSOE              (value: BLEDSOE             )\nSelecting option: BLEIBLERVILLE        (value: BLEIBLERVILLE       )\nSelecting option: BLESSING             (value: BLESSING            )\nSelecting option: BLOOMBURG            (value: BLOOMBURG           )\nSelecting option: BLOOMING GROVE       (value: BLOOMING GROVE      )\nSelecting option: BLOOMINGTON          (value: BLOOMINGTON         )\nSelecting option: BLOSSOM              (value: BLOSSOM             )\nSelecting option: BLUE MOUND           (value: BLUE MOUND          )\nSelecting option: BLUE RIDGE           (value: BLUE RIDGE          )\nSelecting option: BLUEGROVE            (value: BLUEGROVE           )\nSelecting option: BLUFF DALE           (value: BLUFF DALE          )\nSelecting option: BLUFFTON             (value: BLUFFTON            )\nSelecting option: BLUM                 (value: BLUM                )\nSelecting option: BOERNE               (value: BOERNE              )\nSelecting option: BOGATA               (value: BOGATA              )\nSelecting option: BOLING               (value: BOLING              )\nSelecting option: BON WIER             (value: BON WIER            )\nSelecting option: BONHAM               (value: BONHAM              )\nSelecting option: BONNEY               (value: BONNEY              )\nSelecting option: BOOKER               (value: BOOKER              )\nSelecting option: BORGER               (value: BORGER              )\nSelecting option: BOSQUEVILLE          (value: BOSQUEVILLE         )\nSelecting option: BOVINA               (value: BOVINA              )\nSelecting option: BOWIE                (value: BOWIE               )\nSelecting option: BOYD                 (value: BOYD                )\nSelecting option: BOYS RANCH           (value: BOYS RANCH          )\nSelecting option: BRACKETTVILLE        (value: BRACKETTVILLE       )\nSelecting option: BRADY                (value: BRADY               )\nSelecting option: BRANDON              (value: BRANDON             )\nSelecting option: BRASHEAR             (value: BRASHEAR            )\nSelecting option: BRAZORIA             (value: BRAZORIA            )\nSelecting option: BRECKENRIDGE         (value: BRECKENRIDGE        )\nSelecting option: BREMOND              (value: BREMOND             )\nSelecting option: BRENHAM              (value: BRENHAM             )\nSelecting option: BRIAROAKS            (value: BRIAROAKS           )\nSelecting option: BRIDGE CITY          (value: BRIDGE CITY         )\nSelecting option: BRIDGEPORT           (value: BRIDGEPORT          )\nSelecting option: BRIGGS               (value: BRIGGS              )\nSelecting option: BRISCOE              (value: BRISCOE             )\nSelecting option: BRISTOL              (value: BRISTOL             )\nSelecting option: BROADDUS             (value: BROADDUS            )\nSelecting option: BROCK                (value: BROCK               )\nSelecting option: BRONSON              (value: BRONSON             )\nSelecting option: BRONTE               (value: BRONTE              )\nSelecting option: BROOKELAND           (value: BROOKELAND          )\nSelecting option: BROOKESMITH          (value: BROOKESMITH         )\nSelecting option: BROOKS CITY-BASE     (value: BROOKS CITY-BASE    )\nSelecting option: BROOKSHIRE           (value: BROOKSHIRE          )\nSelecting option: BROOKSIDE VILLAGE    (value: BROOKSIDE VILLAGE   )\nSelecting option: BROOKSTON            (value: BROOKSTON           )\nSelecting option: BROWNDELL            (value: BROWNDELL           )\nSelecting option: BROWNFIELD           (value: BROWNFIELD          )\nSelecting option: BROWNSBORO           (value: BROWNSBORO          )\nSelecting option: BROWNSVILLE          (value: BROWNSVILLE         )\nSelecting option: BROWNWOOD            (value: BROWNWOOD           )\nSelecting option: BRUCEVILLE           (value: BRUCEVILLE          )\nSelecting option: BRUNI                (value: BRUNI               )\nSelecting option: BRYAN                (value: BRYAN               )\nSelecting option: BRYSON               (value: BRYSON              )\nSelecting option: BUCHANAN DAM         (value: BUCHANAN DAM        )\nSelecting option: BUCKHOLTS            (value: BUCKHOLTS           )\nSelecting option: BUCKINGHAM           (value: BUCKINGHAM          )\nSelecting option: BUDA                 (value: BUDA                )\nSelecting option: BUFFALO              (value: BUFFALO             )\nSelecting option: BUFFALO GAP          (value: BUFFALO GAP         )\nSelecting option: BULA                 (value: BULA                )\nSelecting option: BULLARD              (value: BULLARD             )\nSelecting option: BULVERDE             (value: BULVERDE            )\nSelecting option: BUNA                 (value: BUNA                )\nSelecting option: BUNKER HILL VILLAGE  (value: BUNKER HILL VILLAGE )\nSelecting option: BURKBURNETT          (value: BURKBURNETT         )\nSelecting option: BURKETT              (value: BURKETT             )\nSelecting option: BURKEVILLE           (value: BURKEVILLE          )\nSelecting option: BURLESON             (value: BURLESON            )\nSelecting option: BURLINGTON           (value: BURLINGTON          )\nSelecting option: BURNET               (value: BURNET              )\nSelecting option: BURTON               (value: BURTON              )\nSelecting option: BUSHLAND             (value: BUSHLAND            )\nSelecting option: BYERS                (value: BYERS               )\nSelecting option: BYNUM                (value: BYNUM               )\nSelecting option: CACTUS               (value: CACTUS              )\nSelecting option: CADDO                (value: CADDO               )\nSelecting option: CADDO MILLS          (value: CADDO MILLS         )\nSelecting option: CALAVERAS            (value: CALAVERAS           )\nSelecting option: CALBON               (value: CALBON              )\nSelecting option: CALDWELL             (value: CALDWELL            )\nSelecting option: CALL                 (value: CALL                )\nSelecting option: CALLIHAM             (value: CALLIHAM            )\nSelecting option: CALLIHAN             (value: CALLIHAN            )\nSelecting option: CALVERT              (value: CALVERT             )\nSelecting option: CAMDEN               (value: CAMDEN              )\nSelecting option: CAMERON              (value: CAMERON             )\nSelecting option: CAMILLA              (value: CAMILLA             )\nSelecting option: CAMP VERDE           (value: CAMP VERDE          )\nSelecting option: CAMP WOOD            (value: CAMP WOOD           )\nSelecting option: CAMPBELL             (value: CAMPBELL            )\nSelecting option: CAMPBELLTON          (value: CAMPBELLTON         )\nSelecting option: CANADIAN             (value: CANADIAN            )\nSelecting option: CANEY CITY           (value: CANEY CITY          )\nSelecting option: CANTON               (value: CANTON              )\nSelecting option: CANUTILLO            (value: CANUTILLO           )\nSelecting option: CANYON               (value: CANYON              )\nSelecting option: CANYON LAKE          (value: CANYON LAKE         )\nSelecting option: CARBON               (value: CARBON              )\nSelecting option: CAREY                (value: CAREY               )\nSelecting option: CARLOS               (value: CARLOS              )\nSelecting option: CARLS CORNER         (value: CARLS CORNER        )\nSelecting option: CARLSBAD             (value: CARLSBAD            )\nSelecting option: CARLTON              (value: CARLTON             )\nSelecting option: CARMINE              (value: CARMINE             )\nSelecting option: CARRIZO SPRINGS      (value: CARRIZO SPRINGS     )\nSelecting option: CARROLLTON           (value: CARROLLTON          )\nSelecting option: CARSWELL AFB         (value: CARSWELL AFB        )\nSelecting option: CARTHAGE             (value: CARTHAGE            )\nSelecting option: CASH                 (value: CASH                )\nSelecting option: CASON                (value: CASON               )\nSelecting option: CASTELL              (value: CASTELL             )\nSelecting option: CASTLE HILLS         (value: CASTLE HILLS        )\nSelecting option: CASTROVILLE          (value: CASTROVILLE         )\nSelecting option: CAT SPRING           (value: CAT SPRING          )\nSelecting option: CATARINA             (value: CATARINA            )\nSelecting option: CAYUGA               (value: CAYUGA              )\nSelecting option: CEDAR CREEK          (value: CEDAR CREEK         )\nSelecting option: CEDAR HILL           (value: CEDAR HILL          )\nSelecting option: CEDAR LANE           (value: CEDAR LANE          )\nSelecting option: CEDAR PARK           (value: CEDAR PARK          )\nSelecting option: CEE VEE              (value: CEE VEE             )\nSelecting option: CELESTE              (value: CELESTE             )\nSelecting option: CELINA               (value: CELINA              )\nSelecting option: CENTER               (value: CENTER              )\nSelecting option: CENTER POINT         (value: CENTER POINT        )\nSelecting option: CENTERVILLE          (value: CENTERVILLE         )\nSelecting option: CENTRALIA            (value: CENTRALIA           )\nSelecting option: CHALK                (value: CHALK               )\nSelecting option: CHANDLER             (value: CHANDLER            )\nSelecting option: CHANNELVIEW          (value: CHANNELVIEW         )\nSelecting option: CHANNING             (value: CHANNING            )\nSelecting option: CHAPMAN RANCH        (value: CHAPMAN RANCH       )\nSelecting option: CHAPPELL HILL        (value: CHAPPELL HILL       )\nSelecting option: CHARLOTTE            (value: CHARLOTTE           )\nSelecting option: CHATAEU WOODS        (value: CHATAEU WOODS       )\nSelecting option: CHATEAU WOODS        (value: CHATEAU WOODS       )\nSelecting option: CHATFIELD            (value: CHATFIELD           )\nSelecting option: CHEEK                (value: CHEEK               )\nSelecting option: CHEROKEE             (value: CHEROKEE            )\nSelecting option: CHESTER              (value: CHESTER             )\nSelecting option: CHICO                (value: CHICO               )\nSelecting option: CHICOTA              (value: CHICOTA             )\nSelecting option: CHILDRESS            (value: CHILDRESS           )\nSelecting option: CHILLICOTHE          (value: CHILLICOTHE         )\nSelecting option: CHILTON              (value: CHILTON             )\nSelecting option: CHINA                (value: CHINA               )\nSelecting option: CHINA GROVE          (value: CHINA GROVE         )\nSelecting option: CHINA SPRING         (value: CHINA SPRING        )\nSelecting option: CHIRENO              (value: CHIRENO             )\nSelecting option: CHRIESMAN            (value: CHRIESMAN           )\nSelecting option: CHRISTINE            (value: CHRISTINE           )\nSelecting option: CHRISTOVAL           (value: CHRISTOVAL          )\nSelecting option: CHURCHILL BRIDGE     (value: CHURCHILL BRIDGE    )\nSelecting option: CIBOLO               (value: CIBOLO              )\nSelecting option: CISCO                (value: CISCO               )\nSelecting option: CITY BY THE SEA      (value: CITY BY THE SEA     )\nSelecting option: CLARENDON            (value: CLARENDON           )\nSelecting option: CLARKSVILLE          (value: CLARKSVILLE         )\nSelecting option: CLARKSVILLE CITY     (value: CLARKSVILLE CITY    )\nSelecting option: CLAUDE               (value: CLAUDE              )\nSelecting option: CLAY                 (value: CLAY                )\nSelecting option: CLAYTON              (value: CLAYTON             )\nSelecting option: CLEAR LAKE           (value: CLEAR LAKE          )\nSelecting option: CLEAR LAKE SHORES    (value: CLEAR LAKE SHORES   )\nSelecting option: CLEAR SPRINGS        (value: CLEAR SPRINGS       )\nSelecting option: CLEBURNE             (value: CLEBURNE            )\nSelecting option: CLEVELAND            (value: CLEVELAND           )\nSelecting option: CLIFTON              (value: CLIFTON             )\nSelecting option: CLINT                (value: CLINT               )\nSelecting option: CLODINE              (value: CLODINE             )\nSelecting option: CLOVER LEAF          (value: CLOVER LEAF         )\nSelecting option: CLUTE                (value: CLUTE               )\nSelecting option: CLYDE                (value: CLYDE               )\nSelecting option: COAHOMA              (value: COAHOMA             )\nSelecting option: COCKRELL HILL        (value: COCKRELL HILL       )\nSelecting option: COFFEE CITY          (value: COFFEE CITY         )\nSelecting option: COIMESNEIL           (value: COIMESNEIL          )\nSelecting option: COLDSPRING           (value: COLDSPRING          )\nSelecting option: COLEMAN              (value: COLEMAN             )\nSelecting option: COLLEGE STATION      (value: COLLEGE STATION     )\nSelecting option: COLLEGEPORT          (value: COLLEGEPORT         )\nSelecting option: COLLEYVILLE          (value: COLLEYVILLE         )\nSelecting option: COLLINSVILLE         (value: COLLINSVILLE        )\nSelecting option: COLMESNEIL           (value: COLMESNEIL          )\nSelecting option: COLORADO             (value: COLORADO            )\nSelecting option: COLORADO CITY        (value: COLORADO CITY       )\nSelecting option: COLUMBUS             (value: COLUMBUS            )\nSelecting option: COMANCHE             (value: COMANCHE            )\nSelecting option: COMBES               (value: COMBES              )\nSelecting option: COMBINE              (value: COMBINE             )\nSelecting option: COMFORT              (value: COMFORT             )\nSelecting option: COMMERCE             (value: COMMERCE            )\nSelecting option: COMO                 (value: COMO                )\nSelecting option: COMSTOCK             (value: COMSTOCK            )\nSelecting option: CONCAN               (value: CONCAN              )\nSelecting option: CONCEPCION           (value: CONCEPCION          )\nSelecting option: CONCORD              (value: CONCORD             )\nSelecting option: CONROE               (value: CONROE              )\nSelecting option: CONVERSE             (value: CONVERSE            )\nSelecting option: COOKVILLE            (value: COOKVILLE           )\nSelecting option: COOL                 (value: COOL                )\nSelecting option: COOLIDGE             (value: COOLIDGE            )\nSelecting option: COOPER               (value: COOPER              )\nSelecting option: COPEVILLE            (value: COPEVILLE           )\nSelecting option: COPPELL              (value: COPPELL             )\nSelecting option: COPPER CANYON        (value: COPPER CANYON       )\nSelecting option: COPPERAS COVE        (value: COPPERAS COVE       )\nSelecting option: COPPERFIELD          (value: COPPERFIELD         )\nSelecting option: CORINTH              (value: CORINTH             )\nSelecting option: CORPUS CHRISTI       (value: CORPUS CHRISTI      )\nSelecting option: CORRIGAN             (value: CORRIGAN            )\nSelecting option: CORSICANA            (value: CORSICANA           )\nSelecting option: COST                 (value: COST                )\nSelecting option: COTTON CENTER        (value: COTTON CENTER       )\nSelecting option: COTTONDALE           (value: COTTONDALE          )\nSelecting option: COTTONWOOD SHORES    (value: COTTONWOOD SHORES   )\nSelecting option: COTULLA              (value: COTULLA             )\nSelecting option: COUPLAND             (value: COUPLAND            )\nSelecting option: COVE                 (value: COVE                )\nSelecting option: COVINGTON            (value: COVINGTON           )\nSelecting option: COYANOSA             (value: COYANOSA            )\nSelecting option: CRABB                (value: CRABB               )\nSelecting option: CRANDALL             (value: CRANDALL            )\nSelecting option: CRANE                (value: CRANE               )\nSelecting option: CRANFILLS GAP        (value: CRANFILLS GAP       )\nSelecting option: CRAWFORD             (value: CRAWFORD            )\nSelecting option: CREEDMOOR            (value: CREEDMOOR           )\nSelecting option: CRESSON              (value: CRESSON             )\nSelecting option: CROCKETT             (value: CROCKETT            )\nSelecting option: CROSBY               (value: CROSBY              )\nSelecting option: CROSBYTON            (value: CROSBYTON           )\nSelecting option: CROSS PLAINS         (value: CROSS PLAINS        )\nSelecting option: CROSS ROADS          (value: CROSS ROADS         )\nSelecting option: CROSSROADS           (value: CROSSROADS          )\nSelecting option: CROWELL              (value: CROWELL             )\nSelecting option: CROWLEY              (value: CROWLEY             )\nSelecting option: CRYSTAL BEACH        (value: CRYSTAL BEACH       )\nSelecting option: CRYSTAL CITY         (value: CRYSTAL CITY        )\nSelecting option: CUERO                (value: CUERO               )\nSelecting option: CUMBY                (value: CUMBY               )\nSelecting option: CUNEY                (value: CUNEY               )\nSelecting option: CUNNINGHAM           (value: CUNNINGHAM          )\nSelecting option: CUSHING              (value: CUSHING             )\nSelecting option: CUT AND SHOOT        (value: CUT AND SHOOT       )\nSelecting option: CYPRESS              (value: CYPRESS             )\nSelecting option: D HANIS              (value: D HANIS             )\nSelecting option: DAINGERFIELD         (value: DAINGERFIELD        )\nSelecting option: DAISETTA             (value: DAISETTA            )\nSelecting option: DALE                 (value: DALE                )\nSelecting option: DALHART              (value: DALHART             )\nSelecting option: DALLARDSVILLE        (value: DALLARDSVILLE       )\nSelecting option: DALLAS               (value: DALLAS              )\nSelecting option: DALWORTHINGTON GDNS  (value: DALWORTHINGTON GDNS )\nSelecting option: DAMON                (value: DAMON               )\nSelecting option: DANBURY              (value: DANBURY             )\nSelecting option: DANCIGER             (value: DANCIGER            )\nSelecting option: DANEVANG             (value: DANEVANG            )\nSelecting option: DARROUZETT           (value: DARROUZETT          )\nSelecting option: DAUGHERTY            (value: DAUGHERTY           )\nSelecting option: DAVILLA              (value: DAVILLA             )\nSelecting option: DAWN                 (value: DAWN                )\nSelecting option: DAWSON               (value: DAWSON              )\nSelecting option: DAYTON               (value: DAYTON              )\nSelecting option: DE BERRY             (value: DE BERRY            )\nSelecting option: DE KALB              (value: DE KALB             )\nSelecting option: DE LEON              (value: DE LEON             )\nSelecting option: DE SOTO              (value: DE SOTO             )\nSelecting option: DEADWOOD             (value: DEADWOOD            )\nSelecting option: DEAN                 (value: DEAN                )\nSelecting option: DEANVILLE            (value: DEANVILLE           )\nSelecting option: DEBERRY              (value: DEBERRY             )\nSelecting option: DECATUR              (value: DECATUR             )\nSelecting option: DEER PARK            (value: DEER PARK           )\nSelecting option: DEKALB               (value: DEKALB              )\nSelecting option: DEL RIO              (value: DEL RIO             )\nSelecting option: DEL VALLE            (value: DEL VALLE           )\nSelecting option: DELEON               (value: DELEON              )\nSelecting option: DELL CITY            (value: DELL CITY           )\nSelecting option: DELMITA              (value: DELMITA             )\nSelecting option: DENISON              (value: DENISON             )\nSelecting option: DENNIS               (value: DENNIS              )\nSelecting option: DENTON               (value: DENTON              )\nSelecting option: DENVER CITY          (value: DENVER CITY         )\nSelecting option: DEPORT               (value: DEPORT              )\nSelecting option: DESDEMONA            (value: DESDEMONA           )\nSelecting option: DESOTO               (value: DESOTO              )\nSelecting option: DETROIT              (value: DETROIT             )\nSelecting option: DEVERS               (value: DEVERS              )\nSelecting option: DEVINE               (value: DEVINE              )\nSelecting option: DEW                  (value: DEW                 )\nSelecting option: DEWEYVILLE           (value: DEWEYVILLE          )\nSelecting option: DFW AIRPORT          (value: DFW AIRPORT         )\nSelecting option: DHANIS               (value: DHANIS              )\nSelecting option: DIANA                (value: DIANA               )\nSelecting option: DIBOLL               (value: DIBOLL              )\nSelecting option: DICKENS              (value: DICKENS             )\nSelecting option: DICKINSON            (value: DICKINSON           )\nSelecting option: DIKE                 (value: DIKE                )\nSelecting option: DILLEY               (value: DILLEY              )\nSelecting option: DIME BOX             (value: DIME BOX            )\nSelecting option: DIMMITT              (value: DIMMITT             )\nSelecting option: DINERO               (value: DINERO              )\nSelecting option: DOBBIN               (value: DOBBIN              )\nSelecting option: DODD CITY            (value: DODD CITY           )\nSelecting option: DODGE                (value: DODGE               )\nSelecting option: DODSON               (value: DODSON              )\nSelecting option: DOGWOOD CITY         (value: DOGWOOD CITY        )\nSelecting option: DOMINO               (value: DOMINO              )\nSelecting option: DONIE                (value: DONIE               )\nSelecting option: DONNA                (value: DONNA               )\nSelecting option: DOOLE                (value: DOOLE               )\nSelecting option: DORCHESTER           (value: DORCHESTER          )\nSelecting option: DOSS                 (value: DOSS                )\nSelecting option: DOUBLE OAK           (value: DOUBLE OAK          )\nSelecting option: DOUCETTE             (value: DOUCETTE            )\nSelecting option: DOUGHERTY            (value: DOUGHERTY           )\nSelecting option: DOUGLASS             (value: DOUGLASS            )\nSelecting option: DOUGLASSVILLE        (value: DOUGLASSVILLE       )\nSelecting option: DRIFTWOOD            (value: DRIFTWOOD           )\nSelecting option: DRIPPING SPRINGS     (value: DRIPPING SPRINGS    )\nSelecting option: DRISCOLL             (value: DRISCOLL            )\nSelecting option: DRYDEN               (value: DRYDEN              )\nSelecting option: DUBLIN               (value: DUBLIN              )\nSelecting option: DUMAS                (value: DUMAS               )\nSelecting option: DUMONT               (value: DUMONT              )\nSelecting option: DUNCANVILLE          (value: DUNCANVILLE         )\nSelecting option: DUNLAY               (value: DUNLAY              )\nSelecting option: DUNN                 (value: DUNN                )\nSelecting option: DYESS AFB            (value: DYESS AFB           )\nSelecting option: EAGLE LAKE           (value: EAGLE LAKE          )\nSelecting option: EAGLE PASS           (value: EAGLE PASS          )\nSelecting option: EARLY                (value: EARLY               )\nSelecting option: EARTH                (value: EARTH               )\nSelecting option: EAST BERNARD         (value: EAST BERNARD        )\nSelecting option: EAST MOUNTAIN        (value: EAST MOUNTAIN       )\nSelecting option: EAST TAWAKONI        (value: EAST TAWAKONI       )\nSelecting option: EAST TEXAS CENTER    (value: EAST TEXAS CENTER   )\nSelecting option: EASTLAND             (value: EASTLAND            )\nSelecting option: EASTON               (value: EASTON              )\nSelecting option: ECLETO               (value: ECLETO              )\nSelecting option: ECTOR                (value: ECTOR               )\nSelecting option: EDCOUCH              (value: EDCOUCH             )\nSelecting option: EDDY                 (value: EDDY                )\nSelecting option: EDEN                 (value: EDEN                )\nSelecting option: EDGECLIFF            (value: EDGECLIFF           )\nSelecting option: EDGECLIFF VILLAGE    (value: EDGECLIFF VILLAGE   )\nSelecting option: EDGEWOOD             (value: EDGEWOOD            )\nSelecting option: EDINBURG             (value: EDINBURG            )\nSelecting option: EDMONSON             (value: EDMONSON            )\nSelecting option: EDNA                 (value: EDNA                )\nSelecting option: EDOM                 (value: EDOM                )\nSelecting option: EDROY                (value: EDROY               )\nSelecting option: EGYPT                (value: EGYPT               )\nSelecting option: EL CAMPO             (value: EL CAMPO            )\nSelecting option: EL CENIZO            (value: EL CENIZO           )\nSelecting option: EL INDIO             (value: EL INDIO            )\nSelecting option: EL LAGO              (value: EL LAGO             )\nSelecting option: EL MATON             (value: EL MATON            )\nSelecting option: EL PASO              (value: EL PASO             )\nSelecting option: EL RANCHITO          (value: EL RANCHITO         )\nSelecting option: ELBERT               (value: ELBERT              )\nSelecting option: ELDORADO             (value: ELDORADO            )\nSelecting option: ELECTRA              (value: ELECTRA             )\nSelecting option: ELGIN                (value: ELGIN               )\nSelecting option: ELIASVILLE           (value: ELIASVILLE          )\nSelecting option: ELKHART              (value: ELKHART             )\nSelecting option: ELLINGER             (value: ELLINGER            )\nSelecting option: ELM MOTT             (value: ELM MOTT            )\nSelecting option: ELMATON              (value: ELMATON             )\nSelecting option: ELMENDORF            (value: ELMENDORF           )\nSelecting option: ELMO                 (value: ELMO                )\nSelecting option: ELROY                (value: ELROY               )\nSelecting option: ELSA                 (value: ELSA                )\nSelecting option: ELYSIAN FIELDS       (value: ELYSIAN FIELDS      )\nSelecting option: EMHOUSE              (value: EMHOUSE             )\nSelecting option: EMORY                (value: EMORY               )\nSelecting option: ENCINAL              (value: ENCINAL             )\nSelecting option: ENCINO               (value: ENCINO              )\nSelecting option: ENERGY               (value: ENERGY              )\nSelecting option: ENLOE                (value: ENLOE               )\nSelecting option: ENNIS                (value: ENNIS               )\nSelecting option: ENOCHS               (value: ENOCHS              )\nSelecting option: EOLA                 (value: EOLA                )\nSelecting option: ERA                  (value: ERA                 )\nSelecting option: ESCOBARES            (value: ESCOBARES           )\nSelecting option: ESTELLINE            (value: ESTELLINE           )\nSelecting option: ETOILE               (value: ETOILE              )\nSelecting option: EULA                 (value: EULA                )\nSelecting option: EULESS               (value: EULESS              )\nSelecting option: EULOGY               (value: EULOGY              )\nSelecting option: EUREKA               (value: EUREKA              )\nSelecting option: EUSTACE              (value: EUSTACE             )\nSelecting option: EVADALE              (value: EVADALE             )\nSelecting option: EVANT                (value: EVANT               )\nSelecting option: EVERGREEN            (value: EVERGREEN           )\nSelecting option: EVERMAN              (value: EVERMAN             )\nSelecting option: FABENS               (value: FABENS              )\nSelecting option: FAIR OAKS RANCH      (value: FAIR OAKS RANCH     )\nSelecting option: FAIRFIELD            (value: FAIRFIELD           )\nSelecting option: FAIRVIEW             (value: FAIRVIEW            )\nSelecting option: FALCON HEIGHTS       (value: FALCON HEIGHTS      )\nSelecting option: FALFURRIAS           (value: FALFURRIAS          )\nSelecting option: FALLS CITY           (value: FALLS CITY          )\nSelecting option: FANNIN               (value: FANNIN              )\nSelecting option: FARGO                (value: FARGO               )\nSelecting option: FARMERS BRANCH       (value: FARMERS BRANCH      )\nSelecting option: FARMERSVILLE         (value: FARMERSVILLE        )\nSelecting option: FARNSWORTH           (value: FARNSWORTH          )\nSelecting option: FARWELL              (value: FARWELL             )\nSelecting option: FASHING              (value: FASHING             )\nSelecting option: FATE                 (value: FATE                )\nSelecting option: FAYETTEVILLE         (value: FAYETTEVILLE        )\nSelecting option: FENTRESS             (value: FENTRESS            )\nSelecting option: FERRIS               (value: FERRIS              )\nSelecting option: FIELDTON             (value: FIELDTON            )\nSelecting option: FISCHER              (value: FISCHER             )\nSelecting option: FLAT                 (value: FLAT                )\nSelecting option: FLATONIA             (value: FLATONIA            )\nSelecting option: FLINT                (value: FLINT               )\nSelecting option: FLOMOT               (value: FLOMOT              )\nSelecting option: FLORENCE             (value: FLORENCE            )\nSelecting option: FLORESVILLE          (value: FLORESVILLE         )\nSelecting option: FLOWER MOUND         (value: FLOWER MOUND        )\nSelecting option: FLOWERMOUND          (value: FLOWERMOUND         )\nSelecting option: FLOYDADA             (value: FLOYDADA            )\nSelecting option: FLUVANNA             (value: FLUVANNA            )\nSelecting option: FLYNN                (value: FLYNN               )\nSelecting option: FOLLETT              (value: FOLLETT             )\nSelecting option: FOREST HILL          (value: FOREST HILL         )\nSelecting option: FOREST HILLS         (value: FOREST HILLS        )\nSelecting option: FORESTBURG           (value: FORESTBURG          )\nSelecting option: FORNEY               (value: FORNEY              )\nSelecting option: FORRESTON            (value: FORRESTON           )\nSelecting option: FORSAN               (value: FORSAN              )\nSelecting option: FORT BLISS           (value: FORT BLISS          )\nSelecting option: FORT DAVIS           (value: FORT DAVIS          )\nSelecting option: FORT GATES           (value: FORT GATES          )\nSelecting option: FORT HANCOCK         (value: FORT HANCOCK        )\nSelecting option: FORT HOOD            (value: FORT HOOD           )\nSelecting option: FORT MC KAVETT       (value: FORT MC KAVETT      )\nSelecting option: FORT SAM HOUSTON     (value: FORT SAM HOUSTON    )\nSelecting option: FORT STOCKTON        (value: FORT STOCKTON       )\nSelecting option: FORT WORTH           (value: FORT WORTH          )\nSelecting option: FOWLERTON            (value: FOWLERTON           )\nSelecting option: FRANCITAS            (value: FRANCITAS           )\nSelecting option: FRANKEL CITY         (value: FRANKEL CITY        )\nSelecting option: FRANKLIN             (value: FRANKLIN            )\nSelecting option: FRANKSTON            (value: FRANKSTON           )\nSelecting option: FRED                 (value: FRED                )\nSelecting option: FREDERICKSBURG       (value: FREDERICKSBURG      )\nSelecting option: FREDONIA             (value: FREDONIA            )\nSelecting option: FREEPORT             (value: FREEPORT            )\nSelecting option: FREER                (value: FREER               )\nSelecting option: FREESTONE            (value: FREESTONE           )\nSelecting option: FRENSHIP             (value: FRENSHIP            )\nSelecting option: FRESNO               (value: FRESNO              )\nSelecting option: FRIENDSWOOD          (value: FRIENDSWOOD         )\nSelecting option: FRIO TOWN            (value: FRIO TOWN           )\nSelecting option: FRIONA               (value: FRIONA              )\nSelecting option: FRISCO               (value: FRISCO              )\nSelecting option: FRITCH               (value: FRITCH              )\nSelecting option: FROST                (value: FROST               )\nSelecting option: FRUITVALE            (value: FRUITVALE           )\nSelecting option: FULSHEAR             (value: FULSHEAR            )\nSelecting option: FULTON               (value: FULTON              )\nSelecting option: GAIL                 (value: GAIL                )\nSelecting option: GAINESVILLE          (value: GAINESVILLE         )\nSelecting option: GALENA PARK          (value: GALENA PARK         )\nSelecting option: GALLATIN             (value: GALLATIN            )\nSelecting option: GALVESTON            (value: GALVESTON           )\nSelecting option: GANADO               (value: GANADO              )\nSelecting option: GARCIAS              (value: GARCIAS             )\nSelecting option: GARCIASVILLE         (value: GARCIASVILLE        )\nSelecting option: GARDEN CITY          (value: GARDEN CITY         )\nSelecting option: GARDEN RIDGE         (value: GARDEN RIDGE        )\nSelecting option: GARDENDALE           (value: GARDENDALE          )\nSelecting option: GARFIELD             (value: GARFIELD            )\nSelecting option: GARLAND              (value: GARLAND             )\nSelecting option: GARRETT              (value: GARRETT             )\nSelecting option: GARRISON             (value: GARRISON            )\nSelecting option: GARWOOD              (value: GARWOOD             )\nSelecting option: GARY                 (value: GARY                )\nSelecting option: GATESVILLE           (value: GATESVILLE          )\nSelecting option: GAUSE                (value: GAUSE               )\nSelecting option: GENEVA               (value: GENEVA              )\nSelecting option: GEORGE WEST          (value: GEORGE WEST         )\nSelecting option: GEORGETOWN           (value: GEORGETOWN          )\nSelecting option: GERONIMO             (value: GERONIMO            )\nSelecting option: GHOLSON              (value: GHOLSON             )\nSelecting option: GIDDINGS             (value: GIDDINGS            )\nSelecting option: GILCHRIST            (value: GILCHRIST           )\nSelecting option: GILLETT              (value: GILLETT             )\nSelecting option: GILMER               (value: GILMER              )\nSelecting option: GIRARD               (value: GIRARD              )\nSelecting option: GIRVIN               (value: GIRVIN              )\nSelecting option: GLADEWATER           (value: GLADEWATER          )\nSelecting option: GLAZIER              (value: GLAZIER             )\nSelecting option: GLEN FLORA           (value: GLEN FLORA          )\nSelecting option: GLEN ROSE            (value: GLEN ROSE           )\nSelecting option: GLENFLORA            (value: GLENFLORA           )\nSelecting option: GLENN HEIGHTS        (value: GLENN HEIGHTS       )\nSelecting option: GLIDDEN              (value: GLIDDEN             )\nSelecting option: GOBER                (value: GOBER               )\nSelecting option: GODLEY               (value: GODLEY              )\nSelecting option: GOLDEN               (value: GOLDEN              )\nSelecting option: GOLDSBORO            (value: GOLDSBORO           )\nSelecting option: GOLDSMITH            (value: GOLDSMITH           )\nSelecting option: GOLDTHWAITE          (value: GOLDTHWAITE         )\nSelecting option: GOLIAD               (value: GOLIAD              )\nSelecting option: GOLINDA              (value: GOLINDA             )\nSelecting option: GONZALES             (value: GONZALES            )\nSelecting option: GOODFELLOW AFB       (value: GOODFELLOW AFB      )\nSelecting option: GOODLOW              (value: GOODLOW             )\nSelecting option: GOODRICH             (value: GOODRICH            )\nSelecting option: GORDON               (value: GORDON              )\nSelecting option: GORDONVILLE          (value: GORDONVILLE         )\nSelecting option: GOREE                (value: GOREE               )\nSelecting option: GORMAN               (value: GORMAN              )\nSelecting option: GOULDBUSK            (value: GOULDBUSK           )\nSelecting option: GRAFORD              (value: GRAFORD             )\nSelecting option: GRAHAM               (value: GRAHAM              )\nSelecting option: GRANBURY             (value: GRANBURY            )\nSelecting option: GRAND PRAIRIE        (value: GRAND PRAIRIE       )\nSelecting option: GRAND SALINE         (value: GRAND SALINE        )\nSelecting option: GRANDFALLS           (value: GRANDFALLS          )\nSelecting option: GRANDVIEW            (value: GRANDVIEW           )\nSelecting option: GRANGER              (value: GRANGER             )\nSelecting option: GRANGERLAND          (value: GRANGERLAND         )\nSelecting option: GRANITE SHOALS       (value: GRANITE SHOALS      )\nSelecting option: GRAPECREEK           (value: GRAPECREEK          )\nSelecting option: GRAPELAND            (value: GRAPELAND           )\nSelecting option: GRAPEVINE            (value: GRAPEVINE           )\nSelecting option: GREENVILLE           (value: GREENVILLE          )\nSelecting option: GREENWOOD            (value: GREENWOOD           )\nSelecting option: GREGORY              (value: GREGORY             )\nSelecting option: GREY FOREST          (value: GREY FOREST         )\nSelecting option: GROESBECK            (value: GROESBECK           )\nSelecting option: GROOM                (value: GROOM               )\nSelecting option: GROVES               (value: GROVES              )\nSelecting option: GROVETON             (value: GROVETON            )\nSelecting option: GRULLA               (value: GRULLA              )\nSelecting option: GRUVER               (value: GRUVER              )\nSelecting option: GUADALUPE            (value: GUADALUPE           )\nSelecting option: GUERRA               (value: GUERRA              )\nSelecting option: GUN BARREL CITY      (value: GUN BARREL CITY     )\nSelecting option: GUNTER               (value: GUNTER              )\nSelecting option: GUSTINE              (value: GUSTINE             )\nSelecting option: GUTHRIE              (value: GUTHRIE             )\nSelecting option: GUY                  (value: GUY                 )\nSelecting option: HACKBERRY            (value: HACKBERRY           )\nSelecting option: HALE CENTER          (value: HALE CENTER         )\nSelecting option: HALLETTSVILLE        (value: HALLETTSVILLE       )\nSelecting option: HALLSBURG            (value: HALLSBURG           )\nSelecting option: HALLSVILLE           (value: HALLSVILLE          )\nSelecting option: HALTOM CITY          (value: HALTOM CITY         )\nSelecting option: HAMILTON             (value: HAMILTON            )\nSelecting option: HAMLIN               (value: HAMLIN              )\nSelecting option: HAMSHIRE             (value: HAMSHIRE            )\nSelecting option: HANKAMER             (value: HANKAMER            )\nSelecting option: HAPPY                (value: HAPPY               )\nSelecting option: HARDIN               (value: HARDIN              )\nSelecting option: HARGILL              (value: HARGILL             )\nSelecting option: HARKER HEIGHTS       (value: HARKER HEIGHTS      )\nSelecting option: HARLETON             (value: HARLETON            )\nSelecting option: HARLINGEN            (value: HARLINGEN           )\nSelecting option: HARPER               (value: HARPER              )\nSelecting option: HARRISON             (value: HARRISON            )\nSelecting option: HARROLD              (value: HARROLD             )\nSelecting option: HART                 (value: HART                )\nSelecting option: HARTLEY              (value: HARTLEY             )\nSelecting option: HARWOOD              (value: HARWOOD             )\nSelecting option: HASKELL              (value: HASKELL             )\nSelecting option: HASLET               (value: HASLET              )\nSelecting option: HAWKINS              (value: HAWKINS             )\nSelecting option: HAWLEY               (value: HAWLEY              )\nSelecting option: HEARNE               (value: HEARNE              )\nSelecting option: HEARTLAND            (value: HEARTLAND           )\nSelecting option: HEATH                (value: HEATH               )\nSelecting option: HEBBRONVILLE         (value: HEBBRONVILLE        )\nSelecting option: HEBRON               (value: HEBRON              )\nSelecting option: HEDLEY               (value: HEDLEY              )\nSelecting option: HEDWIG VILLAGE       (value: HEDWIG VILLAGE      )\nSelecting option: HEIDENHEIMER         (value: HEIDENHEIMER        )\nSelecting option: HELOTES              (value: HELOTES             )\nSelecting option: HEMPHILL             (value: HEMPHILL            )\nSelecting option: HEMPSTEAD            (value: HEMPSTEAD           )\nSelecting option: HENDERSON            (value: HENDERSON           )\nSelecting option: HENRIETTA            (value: HENRIETTA           )\nSelecting option: HEREFORD             (value: HEREFORD            )\nSelecting option: HERMLEIGH            (value: HERMLEIGH           )\nSelecting option: HEWITT               (value: HEWITT              )\nSelecting option: HEXT                 (value: HEXT                )\nSelecting option: HICKORY CREEK        (value: HICKORY CREEK       )\nSelecting option: HICO                 (value: HICO                )\nSelecting option: HIDALGO              (value: HIDALGO             )\nSelecting option: HIGGINS              (value: HIGGINS             )\nSelecting option: HIGH ISLAND          (value: HIGH ISLAND         )\nSelecting option: HIGHLAND             (value: HIGHLAND            )\nSelecting option: HIGHLAND PARK        (value: HIGHLAND PARK       )\nSelecting option: HIGHLAND VILLAGE     (value: HIGHLAND VILLAGE    )\nSelecting option: HIGHLANDS            (value: HIGHLANDS           )\nSelecting option: HILL COUNTRY VILLAGE (value: HILL COUNTRY VILLAGE)\nSelecting option: HILLISTER            (value: HILLISTER           )\nSelecting option: HILLSBORO            (value: HILLSBORO           )\nSelecting option: HILLTOP LAKES        (value: HILLTOP LAKES       )\nSelecting option: HILSHIRE VILLAGE     (value: HILSHIRE VILLAGE    )\nSelecting option: HITCHCOCK            (value: HITCHCOCK           )\nSelecting option: HOBSON               (value: HOBSON              )\nSelecting option: HOCHHEIM             (value: HOCHHEIM            )\nSelecting option: HOCKLEY              (value: HOCKLEY             )\nSelecting option: HOLIDAY LAKES        (value: HOLIDAY LAKES       )\nSelecting option: HOLLAND              (value: HOLLAND             )\nSelecting option: HOLLIDAY             (value: HOLLIDAY            )\nSelecting option: HOLLY LAKE RANCH     (value: HOLLY LAKE RANCH    )\nSelecting option: HOLLYWOOD PARK       (value: HOLLYWOOD PARK      )\nSelecting option: HONDO                (value: HONDO               )\nSelecting option: HONEY GROVE          (value: HONEY GROVE         )\nSelecting option: HONEY ISLAND         (value: HONEY ISLAND        )\n\n\nTargetClosedError: Page.wait_for_timeout: Target page, context or browser has been closed"
  }
]